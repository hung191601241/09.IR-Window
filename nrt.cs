//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace nrt {

public class StringVector : global::System.IDisposable, global::System.Collections.IEnumerable, global::System.Collections.Generic.IList<string>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal StringVector(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(StringVector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(StringVector obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~StringVector() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_StringVector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public StringVector(global::System.Collections.IEnumerable c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (string element in c) {
      this.Add(element);
    }
  }

  public StringVector(global::System.Collections.Generic.IEnumerable<string> c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (string element in c) {
      this.Add(element);
    }
  }

  public bool IsFixedSize {
    get {
      return false;
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public string this[int index]  {
    get {
      return getitem(index);
    }
    set {
      setitem(index, value);
    }
  }

  public int Capacity {
    get {
      return (int)capacity();
    }
    set {
      if (value < 0 || (uint)value < size())
        throw new global::System.ArgumentOutOfRangeException("Capacity");
      reserve((uint)value);
    }
  }

  public bool IsEmpty {
    get {
      return empty();
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsSynchronized {
    get {
      return false;
    }
  }

  public void CopyTo(string[] array)
  {
    CopyTo(0, array, 0, this.Count);
  }

  public void CopyTo(string[] array, int arrayIndex)
  {
    CopyTo(0, array, arrayIndex, this.Count);
  }

  public void CopyTo(int index, string[] array, int arrayIndex, int count)
  {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (index < 0)
      throw new global::System.ArgumentOutOfRangeException("index", "Value is less than zero");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (count < 0)
      throw new global::System.ArgumentOutOfRangeException("count", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (index+count > this.Count || arrayIndex+count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");
    for (int i=0; i<count; i++)
      array.SetValue(getitemcopy(index+i), arrayIndex+i);
  }

  public string[] ToArray() {
    string[] array = new string[this.Count];
    this.CopyTo(array);
    return array;
  }

  global::System.Collections.Generic.IEnumerator<string> global::System.Collections.Generic.IEnumerable<string>.GetEnumerator() {
    return new StringVectorEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new StringVectorEnumerator(this);
  }

  public StringVectorEnumerator GetEnumerator() {
    return new StringVectorEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class StringVectorEnumerator : global::System.Collections.IEnumerator
    , global::System.Collections.Generic.IEnumerator<string>
  {
    private StringVector collectionRef;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public StringVectorEnumerator(StringVector collection) {
      collectionRef = collection;
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public string Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (string)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        currentObject = collectionRef[currentIndex];
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
        currentIndex = -1;
        currentObject = null;
    }
  }

  public StringVector() : this(nrtPINVOKE.new_StringVector__SWIG_0(), true) {
  }

  public StringVector(StringVector other) : this(nrtPINVOKE.new_StringVector__SWIG_1(StringVector.getCPtr(other)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Clear() {
    nrtPINVOKE.StringVector_Clear(swigCPtr);
  }

  public void Add(string x) {
    nrtPINVOKE.StringVector_Add(swigCPtr, x);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  private uint size() {
    uint ret = nrtPINVOKE.StringVector_size(swigCPtr);
    return ret;
  }

  private bool empty() {
    bool ret = nrtPINVOKE.StringVector_empty(swigCPtr);
    return ret;
  }

  private uint capacity() {
    uint ret = nrtPINVOKE.StringVector_capacity(swigCPtr);
    return ret;
  }

  private void reserve(uint n) {
    nrtPINVOKE.StringVector_reserve(swigCPtr, n);
  }

  public StringVector(int capacity) : this(nrtPINVOKE.new_StringVector__SWIG_2(capacity), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  private string getitemcopy(int index) {
    string ret = nrtPINVOKE.StringVector_getitemcopy(swigCPtr, index);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private string getitem(int index) {
    string ret = nrtPINVOKE.StringVector_getitem(swigCPtr, index);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(int index, string val) {
    nrtPINVOKE.StringVector_setitem(swigCPtr, index, val);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddRange(StringVector values) {
    nrtPINVOKE.StringVector_AddRange(swigCPtr, StringVector.getCPtr(values));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public StringVector GetRange(int index, int count) {
    global::System.IntPtr cPtr = nrtPINVOKE.StringVector_GetRange(swigCPtr, index, count);
    StringVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new StringVector(cPtr, true);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Insert(int index, string x) {
    nrtPINVOKE.StringVector_Insert(swigCPtr, index, x);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public void InsertRange(int index, StringVector values) {
    nrtPINVOKE.StringVector_InsertRange(swigCPtr, index, StringVector.getCPtr(values));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAt(int index) {
    nrtPINVOKE.StringVector_RemoveAt(swigCPtr, index);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveRange(int index, int count) {
    nrtPINVOKE.StringVector_RemoveRange(swigCPtr, index, count);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public static StringVector Repeat(string value, int count) {
    global::System.IntPtr cPtr = nrtPINVOKE.StringVector_Repeat(value, count);
    StringVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new StringVector(cPtr, true);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Reverse() {
    nrtPINVOKE.StringVector_Reverse__SWIG_0(swigCPtr);
  }

  public void Reverse(int index, int count) {
    nrtPINVOKE.StringVector_Reverse__SWIG_1(swigCPtr, index, count);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRange(int index, StringVector values) {
    nrtPINVOKE.StringVector_SetRange(swigCPtr, index, StringVector.getCPtr(values));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Contains(string value) {
    bool ret = nrtPINVOKE.StringVector_Contains(swigCPtr, value);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int IndexOf(string value) {
    int ret = nrtPINVOKE.StringVector_IndexOf(swigCPtr, value);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int LastIndexOf(string value) {
    int ret = nrtPINVOKE.StringVector_LastIndexOf(swigCPtr, value);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Remove(string value) {
    bool ret = nrtPINVOKE.StringVector_Remove(swigCPtr, value);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace nrt {

public class FloatVector : global::System.IDisposable, global::System.Collections.IEnumerable, global::System.Collections.Generic.IList<float>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FloatVector(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FloatVector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(FloatVector obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~FloatVector() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_FloatVector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public FloatVector(global::System.Collections.IEnumerable c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (float element in c) {
      this.Add(element);
    }
  }

  public FloatVector(global::System.Collections.Generic.IEnumerable<float> c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (float element in c) {
      this.Add(element);
    }
  }

  public bool IsFixedSize {
    get {
      return false;
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public float this[int index]  {
    get {
      return getitem(index);
    }
    set {
      setitem(index, value);
    }
  }

  public int Capacity {
    get {
      return (int)capacity();
    }
    set {
      if (value < 0 || (uint)value < size())
        throw new global::System.ArgumentOutOfRangeException("Capacity");
      reserve((uint)value);
    }
  }

  public bool IsEmpty {
    get {
      return empty();
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsSynchronized {
    get {
      return false;
    }
  }

  public void CopyTo(float[] array)
  {
    CopyTo(0, array, 0, this.Count);
  }

  public void CopyTo(float[] array, int arrayIndex)
  {
    CopyTo(0, array, arrayIndex, this.Count);
  }

  public void CopyTo(int index, float[] array, int arrayIndex, int count)
  {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (index < 0)
      throw new global::System.ArgumentOutOfRangeException("index", "Value is less than zero");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (count < 0)
      throw new global::System.ArgumentOutOfRangeException("count", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (index+count > this.Count || arrayIndex+count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");
    for (int i=0; i<count; i++)
      array.SetValue(getitemcopy(index+i), arrayIndex+i);
  }

  public float[] ToArray() {
    float[] array = new float[this.Count];
    this.CopyTo(array);
    return array;
  }

  global::System.Collections.Generic.IEnumerator<float> global::System.Collections.Generic.IEnumerable<float>.GetEnumerator() {
    return new FloatVectorEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new FloatVectorEnumerator(this);
  }

  public FloatVectorEnumerator GetEnumerator() {
    return new FloatVectorEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class FloatVectorEnumerator : global::System.Collections.IEnumerator
    , global::System.Collections.Generic.IEnumerator<float>
  {
    private FloatVector collectionRef;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public FloatVectorEnumerator(FloatVector collection) {
      collectionRef = collection;
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public float Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (float)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        currentObject = collectionRef[currentIndex];
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
        currentIndex = -1;
        currentObject = null;
    }
  }

  public FloatVector() : this(nrtPINVOKE.new_FloatVector__SWIG_0(), true) {
  }

  public FloatVector(FloatVector other) : this(nrtPINVOKE.new_FloatVector__SWIG_1(FloatVector.getCPtr(other)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Clear() {
    nrtPINVOKE.FloatVector_Clear(swigCPtr);
  }

  public void Add(float x) {
    nrtPINVOKE.FloatVector_Add(swigCPtr, x);
  }

  private uint size() {
    uint ret = nrtPINVOKE.FloatVector_size(swigCPtr);
    return ret;
  }

  private bool empty() {
    bool ret = nrtPINVOKE.FloatVector_empty(swigCPtr);
    return ret;
  }

  private uint capacity() {
    uint ret = nrtPINVOKE.FloatVector_capacity(swigCPtr);
    return ret;
  }

  private void reserve(uint n) {
    nrtPINVOKE.FloatVector_reserve(swigCPtr, n);
  }

  public FloatVector(int capacity) : this(nrtPINVOKE.new_FloatVector__SWIG_2(capacity), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  private float getitemcopy(int index) {
    float ret = nrtPINVOKE.FloatVector_getitemcopy(swigCPtr, index);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private float getitem(int index) {
    float ret = nrtPINVOKE.FloatVector_getitem(swigCPtr, index);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(int index, float val) {
    nrtPINVOKE.FloatVector_setitem(swigCPtr, index, val);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddRange(FloatVector values) {
    nrtPINVOKE.FloatVector_AddRange(swigCPtr, FloatVector.getCPtr(values));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public FloatVector GetRange(int index, int count) {
    global::System.IntPtr cPtr = nrtPINVOKE.FloatVector_GetRange(swigCPtr, index, count);
    FloatVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new FloatVector(cPtr, true);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Insert(int index, float x) {
    nrtPINVOKE.FloatVector_Insert(swigCPtr, index, x);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public void InsertRange(int index, FloatVector values) {
    nrtPINVOKE.FloatVector_InsertRange(swigCPtr, index, FloatVector.getCPtr(values));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAt(int index) {
    nrtPINVOKE.FloatVector_RemoveAt(swigCPtr, index);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveRange(int index, int count) {
    nrtPINVOKE.FloatVector_RemoveRange(swigCPtr, index, count);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public static FloatVector Repeat(float value, int count) {
    global::System.IntPtr cPtr = nrtPINVOKE.FloatVector_Repeat(value, count);
    FloatVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new FloatVector(cPtr, true);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Reverse() {
    nrtPINVOKE.FloatVector_Reverse__SWIG_0(swigCPtr);
  }

  public void Reverse(int index, int count) {
    nrtPINVOKE.FloatVector_Reverse__SWIG_1(swigCPtr, index, count);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRange(int index, FloatVector values) {
    nrtPINVOKE.FloatVector_SetRange(swigCPtr, index, FloatVector.getCPtr(values));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Contains(float value) {
    bool ret = nrtPINVOKE.FloatVector_Contains(swigCPtr, value);
    return ret;
  }

  public int IndexOf(float value) {
    int ret = nrtPINVOKE.FloatVector_IndexOf(swigCPtr, value);
    return ret;
  }

  public int LastIndexOf(float value) {
    int ret = nrtPINVOKE.FloatVector_LastIndexOf(swigCPtr, value);
    return ret;
  }

  public bool Remove(float value) {
    bool ret = nrtPINVOKE.FloatVector_Remove(swigCPtr, value);
    return ret;
  }

}

}
namespace nrt {

public enum Status {
  STATUS_SUCCESS = 0,
  STATUS_ERROR_INVALID_VALUE = 1,
  STATUS_ERROR_SYSTEM = 2,
  STATUS_ERROR_UNKNOWN = 999
}

}
namespace nrt {

public enum DType {
  DTYPE_NONE = 0,
  DTYPE_INT8 = 1,
  DTYPE_UINT8 = 2,
  DTYPE_INT16 = 3,
  DTYPE_UINT16 = 4,
  DTYPE_INT32 = 5,
  DTYPE_UINT32 = 6,
  DTYPE_INT64 = 7,
  DTYPE_UINT64 = 8,
  DTYPE_FLOAT16 = 9,
  DTYPE_FLOAT32 = 10,
  DTYPE_FLOAT64 = 11
}

}
namespace nrt {

public enum InterpolationType {
  INTER_NONE = 0,
  INTER_NEAREST = 1,
  INTER_LINEAR = 2,
  INTER_AREA = 3,
  INTER_CUBIC = 4
}

}
namespace nrt {

public enum ThresholdMode {
  THRES_MODE_UNKNOWN = 0,
  THRES_MODE_SECOND = 1
}

}
namespace nrt {

public class Shape : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Shape(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Shape obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Shape obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Shape() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_Shape(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Shape() : this(nrtPINVOKE.new_Shape__SWIG_0(), true) {
  }

  public Shape(int d0) : this(nrtPINVOKE.new_Shape__SWIG_1(d0), true) {
  }

  public Shape(int d0, int d1) : this(nrtPINVOKE.new_Shape__SWIG_2(d0, d1), true) {
  }

  public Shape(int d0, int d1, int d2) : this(nrtPINVOKE.new_Shape__SWIG_3(d0, d1, d2), true) {
  }

  public Shape(int d0, int d1, int d2, int d3) : this(nrtPINVOKE.new_Shape__SWIG_4(d0, d1, d2, d3), true) {
  }

  public Shape(SWIGTYPE_p_std__vectorT_int_t ds) : this(nrtPINVOKE.new_Shape__SWIG_5(SWIGTYPE_p_std__vectorT_int_t.getCPtr(ds)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public int get_axis(int axis_index) {
    int ret = nrtPINVOKE.Shape_get_axis(swigCPtr, axis_index);
    return ret;
  }

  public void set_axis(int axis_index, int value) {
    nrtPINVOKE.Shape_set_axis(swigCPtr, axis_index, value);
  }

  public int get_dim(int dim_index) {
    int ret = nrtPINVOKE.Shape_get_dim(swigCPtr, dim_index);
    return ret;
  }

  public Shape to_batch_shape(int batch_size) {
    Shape ret = new Shape(nrtPINVOKE.Shape_to_batch_shape(swigCPtr, batch_size), true);
    return ret;
  }

  public int num_dim {
    set {
      nrtPINVOKE.Shape_num_dim_set(swigCPtr, value);
    } 
    get {
      int ret = nrtPINVOKE.Shape_num_dim_get(swigCPtr);
      return ret;
    } 
  }

  public static readonly int DIM_UNKNOWN = nrtPINVOKE.Shape_DIM_UNKNOWN_get();

  public static readonly int MAX_DIM = nrtPINVOKE.Shape_MAX_DIM_get();
}

}
namespace nrt {

public class Roi : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Roi(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Roi obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Roi obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Roi() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_Roi(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public int original_image_width {
    set {
      nrtPINVOKE.Roi_original_image_width_set(swigCPtr, value);
    } 
    get {
      int ret = nrtPINVOKE.Roi_original_image_width_get(swigCPtr);
      return ret;
    } 
  }

  public int original_image_height {
    set {
      nrtPINVOKE.Roi_original_image_height_set(swigCPtr, value);
    } 
    get {
      int ret = nrtPINVOKE.Roi_original_image_height_get(swigCPtr);
      return ret;
    } 
  }

  public int x {
    set {
      nrtPINVOKE.Roi_x_set(swigCPtr, value);
    } 
    get {
      int ret = nrtPINVOKE.Roi_x_get(swigCPtr);
      return ret;
    } 
  }

  public int y {
    set {
      nrtPINVOKE.Roi_y_set(swigCPtr, value);
    } 
    get {
      int ret = nrtPINVOKE.Roi_y_get(swigCPtr);
      return ret;
    } 
  }

  public int width {
    set {
      nrtPINVOKE.Roi_width_set(swigCPtr, value);
    } 
    get {
      int ret = nrtPINVOKE.Roi_width_get(swigCPtr);
      return ret;
    } 
  }

  public int height {
    set {
      nrtPINVOKE.Roi_height_set(swigCPtr, value);
    } 
    get {
      int ret = nrtPINVOKE.Roi_height_get(swigCPtr);
      return ret;
    } 
  }

  public Roi() : this(nrtPINVOKE.new_Roi(), true) {
  }

}

}
namespace nrt {

public class BoxRule : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BoxRule(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BoxRule obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(BoxRule obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~BoxRule() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_BoxRule(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public int order_column {
    set {
      nrtPINVOKE.BoxRule_order_column_set(swigCPtr, value);
    } 
    get {
      int ret = nrtPINVOKE.BoxRule_order_column_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__optionalT_int_t condition_category {
    set {
      nrtPINVOKE.BoxRule_condition_category_set(swigCPtr, SWIGTYPE_p_std__optionalT_int_t.getCPtr(value));
      if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_std__optionalT_int_t ret = new SWIGTYPE_p_std__optionalT_int_t(nrtPINVOKE.BoxRule_condition_category_get(swigCPtr), true);
      if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_std__optionalT_std__string_t condition_fixed_value {
    set {
      nrtPINVOKE.BoxRule_condition_fixed_value_set(swigCPtr, SWIGTYPE_p_std__optionalT_std__string_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = nrtPINVOKE.BoxRule_condition_fixed_value_get(swigCPtr);
      SWIGTYPE_p_std__optionalT_std__string_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__optionalT_std__string_t(cPtr, false);
      return ret;
    } 
  }

  public bool condition_priority {
    set {
      nrtPINVOKE.BoxRule_condition_priority_set(swigCPtr, value);
    } 
    get {
      bool ret = nrtPINVOKE.BoxRule_condition_priority_get(swigCPtr);
      return ret;
    } 
  }

  public int x {
    set {
      nrtPINVOKE.BoxRule_x_set(swigCPtr, value);
    } 
    get {
      int ret = nrtPINVOKE.BoxRule_x_get(swigCPtr);
      return ret;
    } 
  }

  public int y {
    set {
      nrtPINVOKE.BoxRule_y_set(swigCPtr, value);
    } 
    get {
      int ret = nrtPINVOKE.BoxRule_y_get(swigCPtr);
      return ret;
    } 
  }

  public int width {
    set {
      nrtPINVOKE.BoxRule_width_set(swigCPtr, value);
    } 
    get {
      int ret = nrtPINVOKE.BoxRule_width_get(swigCPtr);
      return ret;
    } 
  }

  public int height {
    set {
      nrtPINVOKE.BoxRule_height_set(swigCPtr, value);
    } 
    get {
      int ret = nrtPINVOKE.BoxRule_height_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__mapT_std__string_std__string_t correction_dict {
    set {
      nrtPINVOKE.BoxRule_correction_dict_set(swigCPtr, SWIGTYPE_p_std__mapT_std__string_std__string_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = nrtPINVOKE.BoxRule_correction_dict_get(swigCPtr);
      SWIGTYPE_p_std__mapT_std__string_std__string_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__mapT_std__string_std__string_t(cPtr, false);
      return ret;
    } 
  }

  public BoxRule() : this(nrtPINVOKE.new_BoxRule(), true) {
  }

}

}
namespace nrt {

public class TextRule : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal TextRule(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TextRule obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(TextRule obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~TextRule() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_TextRule(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public string name {
    set {
      nrtPINVOKE.TextRule_name_set(swigCPtr, value);
      if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = nrtPINVOKE.TextRule_name_get(swigCPtr);
      if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int occurrence {
    set {
      nrtPINVOKE.TextRule_occurrence_set(swigCPtr, value);
    } 
    get {
      int ret = nrtPINVOKE.TextRule_occurrence_get(swigCPtr);
      return ret;
    } 
  }

  public float threshold {
    set {
      nrtPINVOKE.TextRule_threshold_set(swigCPtr, value);
    } 
    get {
      float ret = nrtPINVOKE.TextRule_threshold_get(swigCPtr);
      return ret;
    } 
  }

  public int min_matches {
    set {
      nrtPINVOKE.TextRule_min_matches_set(swigCPtr, value);
    } 
    get {
      int ret = nrtPINVOKE.TextRule_min_matches_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__optionalT_nrt__Roi_t roi {
    set {
      nrtPINVOKE.TextRule_roi_set(swigCPtr, SWIGTYPE_p_std__optionalT_nrt__Roi_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = nrtPINVOKE.TextRule_roi_get(swigCPtr);
      SWIGTYPE_p_std__optionalT_nrt__Roi_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__optionalT_nrt__Roi_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_nrt__BoxRule_t textruleboxes {
    set {
      nrtPINVOKE.TextRule_textruleboxes_set(swigCPtr, SWIGTYPE_p_std__vectorT_nrt__BoxRule_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = nrtPINVOKE.TextRule_textruleboxes_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_nrt__BoxRule_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_nrt__BoxRule_t(cPtr, false);
      return ret;
    } 
  }

  public TextRule() : this(nrtPINVOKE.new_TextRule(), true) {
  }

}

}
namespace nrt {

public class NDBuffer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal NDBuffer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(NDBuffer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(NDBuffer obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~NDBuffer() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_NDBuffer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public NDBuffer() : this(nrtPINVOKE.new_NDBuffer__SWIG_0(), true) {
  }

  public NDBuffer(Shape _shape, DType _dtype, bool zeroInit) : this(nrtPINVOKE.new_NDBuffer__SWIG_1(Shape.getCPtr(_shape), (int)_dtype, zeroInit), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public NDBuffer(Shape _shape, DType _dtype) : this(nrtPINVOKE.new_NDBuffer__SWIG_2(Shape.getCPtr(_shape), (int)_dtype), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public NDBuffer(Shape _shape) : this(nrtPINVOKE.new_NDBuffer__SWIG_3(Shape.getCPtr(_shape)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public NDBuffer(byte[] buff, ulong buff_size, Shape _shape, DType _dtype) : this(nrtPINVOKE.new_NDBuffer__SWIG_4(buff, buff_size, Shape.getCPtr(_shape), (int)_dtype), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public NDBuffer(byte[] buff, ulong buff_size, Shape _shape) : this(nrtPINVOKE.new_NDBuffer__SWIG_5(buff, buff_size, Shape.getCPtr(_shape)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public static NDBuffer zeros(Shape _shape, DType _dtype) {
    NDBuffer ret = new NDBuffer(nrtPINVOKE.NDBuffer_zeros(Shape.getCPtr(_shape), (int)_dtype), true);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static NDBuffer make_size_thres(int height_thres, int width_thres, int thres_cond) {
    NDBuffer ret = new NDBuffer(nrtPINVOKE.NDBuffer_make_size_thres(height_thres, width_thres, thres_cond), true);
    return ret;
  }

  public static NDBuffer make_roi_info(int original_height, int original_width, int x, int y, int roi_height, int roi_width) {
    NDBuffer ret = new NDBuffer(nrtPINVOKE.NDBuffer_make_roi_info(original_height, original_width, x, y, roi_height, roi_width), true);
    return ret;
  }

  public NDBuffer(NDBuffer src) : this(nrtPINVOKE.new_NDBuffer__SWIG_6(NDBuffer.getCPtr(src)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public int copy_to_buffer(byte[] buff, ulong buff_size) {
    int ret = nrtPINVOKE.NDBuffer_copy_to_buffer__SWIG_0(swigCPtr, buff, buff_size);
    return ret;
  }

  public int copy_from_buffer(byte[] buff, ulong buff_size) {
    int ret = nrtPINVOKE.NDBuffer_copy_from_buffer__SWIG_0(swigCPtr, buff, buff_size);
    return ret;
  }

  public int copy_to_buffer(int idx0, byte[] buff, ulong buff_size) {
    int ret = nrtPINVOKE.NDBuffer_copy_to_buffer__SWIG_1(swigCPtr, idx0, buff, buff_size);
    return ret;
  }

  public int copy_from_buffer(int idx0, byte[] buff, ulong buff_size) {
    int ret = nrtPINVOKE.NDBuffer_copy_from_buffer__SWIG_1(swigCPtr, idx0, buff, buff_size);
    return ret;
  }

  public ulong get_total_size() {
    ulong ret = nrtPINVOKE.NDBuffer_get_total_size(swigCPtr);
    return ret;
  }

  public ulong get_byte_size() {
    ulong ret = nrtPINVOKE.NDBuffer_get_byte_size(swigCPtr);
    return ret;
  }

  public global::System.IntPtr get_data_ptr() {
    global::System.IntPtr ret = nrtPINVOKE.NDBuffer_get_data_ptr(swigCPtr);
    return ret;
  }

  public global::System.IntPtr get_at_ptr(int idx0, int idx1, int idx2, int idx3) {
    global::System.IntPtr ret = nrtPINVOKE.NDBuffer_get_at_ptr__SWIG_0(swigCPtr, idx0, idx1, idx2, idx3);
    return ret;
  }

  public global::System.IntPtr get_at_ptr(int idx0, int idx1, int idx2) {
    global::System.IntPtr ret = nrtPINVOKE.NDBuffer_get_at_ptr__SWIG_1(swigCPtr, idx0, idx1, idx2);
    return ret;
  }

  public global::System.IntPtr get_at_ptr(int idx0, int idx1) {
    global::System.IntPtr ret = nrtPINVOKE.NDBuffer_get_at_ptr__SWIG_2(swigCPtr, idx0, idx1);
    return ret;
  }

  public global::System.IntPtr get_at_ptr(int idx0) {
    global::System.IntPtr ret = nrtPINVOKE.NDBuffer_get_at_ptr__SWIG_3(swigCPtr, idx0);
    return ret;
  }

  public global::System.IntPtr get_at_ptr() {
    global::System.IntPtr ret = nrtPINVOKE.NDBuffer_get_at_ptr__SWIG_4(swigCPtr);
    return ret;
  }

  public DType get_dtype() {
    DType ret = (DType)nrtPINVOKE.NDBuffer_get_dtype(swigCPtr);
    return ret;
  }

  public Shape get_shape() {
    Shape ret = new Shape(nrtPINVOKE.NDBuffer_get_shape(swigCPtr), false);
    return ret;
  }

  public NDBuffer clone() {
    NDBuffer ret = new NDBuffer(nrtPINVOKE.NDBuffer_clone(swigCPtr), true);
    return ret;
  }

  public void reset(Shape _shape, DType _dtype) {
    nrtPINVOKE.NDBuffer_reset__SWIG_0(swigCPtr, Shape.getCPtr(_shape), (int)_dtype);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset(Shape _shape) {
    nrtPINVOKE.NDBuffer_reset__SWIG_1(swigCPtr, Shape.getCPtr(_shape));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool empty() {
    bool ret = nrtPINVOKE.NDBuffer_empty(swigCPtr);
    return ret;
  }

  public static NDBuffer int64(long value) {
    NDBuffer ret = new NDBuffer(nrtPINVOKE.NDBuffer_int64(value), true);
    return ret;
  }

  public static NDBuffer load_image(string image_path) {
    NDBuffer ret = new NDBuffer(nrtPINVOKE.NDBuffer_load_image(image_path), true);
    return ret;
  }

  public static NDBuffer load_images(Shape target_shape, string image_paths, InterpolationType resize_method) {
    NDBuffer ret = new NDBuffer(nrtPINVOKE.NDBuffer_load_images__SWIG_0(Shape.getCPtr(target_shape), image_paths, (int)resize_method), true);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static NDBuffer load_images(Shape target_shape, string image_paths) {
    NDBuffer ret = new NDBuffer(nrtPINVOKE.NDBuffer_load_images__SWIG_1(Shape.getCPtr(target_shape), image_paths), true);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _dbg_show() {
    nrtPINVOKE.NDBuffer__dbg_show(swigCPtr);
  }

  public void _dbg_colormap_show() {
    nrtPINVOKE.NDBuffer__dbg_colormap_show(swigCPtr);
  }

  public int copy_from_buffer_uint8(byte[] src_buff, ulong buff_size) {
    int ret = nrtPINVOKE.NDBuffer_copy_from_buffer_uint8__SWIG_0(swigCPtr, src_buff, buff_size);
    return ret;
  }

  public int copy_from_buffer_uint8(int idx0, byte[] src_buff, ulong buff_size) {
    int ret = nrtPINVOKE.NDBuffer_copy_from_buffer_uint8__SWIG_1(swigCPtr, idx0, src_buff, buff_size);
    return ret;
  }

  public int copy_from_buffer_int16(short[] src_buff, ulong buff_size) {
    int ret = nrtPINVOKE.NDBuffer_copy_from_buffer_int16__SWIG_0(swigCPtr, src_buff, buff_size);
    return ret;
  }

  public int copy_from_buffer_int16(int idx0, short[] src_buff, ulong buff_size) {
    int ret = nrtPINVOKE.NDBuffer_copy_from_buffer_int16__SWIG_1(swigCPtr, idx0, src_buff, buff_size);
    return ret;
  }

  public int copy_from_buffer_uint16(ushort[] src_buff, ulong buff_size) {
    int ret = nrtPINVOKE.NDBuffer_copy_from_buffer_uint16__SWIG_0(swigCPtr, src_buff, buff_size);
    return ret;
  }

  public int copy_from_buffer_uint16(int idx0, ushort[] src_buff, ulong buff_size) {
    int ret = nrtPINVOKE.NDBuffer_copy_from_buffer_uint16__SWIG_1(swigCPtr, idx0, src_buff, buff_size);
    return ret;
  }

  public int copy_from_buffer_int32(int[] src_buff, ulong buff_size) {
    int ret = nrtPINVOKE.NDBuffer_copy_from_buffer_int32__SWIG_0(swigCPtr, src_buff, buff_size);
    return ret;
  }

  public int copy_from_buffer_int32(int idx0, int[] src_buff, ulong buff_size) {
    int ret = nrtPINVOKE.NDBuffer_copy_from_buffer_int32__SWIG_1(swigCPtr, idx0, src_buff, buff_size);
    return ret;
  }

  public int copy_from_buffer_uint32(uint[] src_buff, ulong buff_size) {
    int ret = nrtPINVOKE.NDBuffer_copy_from_buffer_uint32__SWIG_0(swigCPtr, src_buff, buff_size);
    return ret;
  }

  public int copy_from_buffer_uint32(int idx0, uint[] src_buff, ulong buff_size) {
    int ret = nrtPINVOKE.NDBuffer_copy_from_buffer_uint32__SWIG_1(swigCPtr, idx0, src_buff, buff_size);
    return ret;
  }

  public int copy_from_buffer_int64(long[] src_buff, ulong buff_size) {
    int ret = nrtPINVOKE.NDBuffer_copy_from_buffer_int64__SWIG_0(swigCPtr, src_buff, buff_size);
    return ret;
  }

  public int copy_from_buffer_int64(int idx0, long[] src_buff, ulong buff_size) {
    int ret = nrtPINVOKE.NDBuffer_copy_from_buffer_int64__SWIG_1(swigCPtr, idx0, src_buff, buff_size);
    return ret;
  }

  public int copy_from_buffer_uint64(ulong[] src_buff, ulong buff_size) {
    int ret = nrtPINVOKE.NDBuffer_copy_from_buffer_uint64__SWIG_0(swigCPtr, src_buff, buff_size);
    return ret;
  }

  public int copy_from_buffer_uint64(int idx0, ulong[] src_buff, ulong buff_size) {
    int ret = nrtPINVOKE.NDBuffer_copy_from_buffer_uint64__SWIG_1(swigCPtr, idx0, src_buff, buff_size);
    return ret;
  }

  public int copy_from_buffer_float32(float[] src_buff, ulong buff_size) {
    int ret = nrtPINVOKE.NDBuffer_copy_from_buffer_float32__SWIG_0(swigCPtr, src_buff, buff_size);
    return ret;
  }

  public int copy_from_buffer_float32(int idx0, float[] src_buff, ulong buff_size) {
    int ret = nrtPINVOKE.NDBuffer_copy_from_buffer_float32__SWIG_1(swigCPtr, idx0, src_buff, buff_size);
    return ret;
  }

  public int copy_from_buffer_float64(double[] src_buff, ulong buff_size) {
    int ret = nrtPINVOKE.NDBuffer_copy_from_buffer_float64__SWIG_0(swigCPtr, src_buff, buff_size);
    return ret;
  }

  public int copy_from_buffer_float64(int idx0, double[] src_buff, ulong buff_size) {
    int ret = nrtPINVOKE.NDBuffer_copy_from_buffer_float64__SWIG_1(swigCPtr, idx0, src_buff, buff_size);
    return ret;
  }

  public int copy_to_buffer_uint8(byte[] dst_buff, ulong buff_size) {
    int ret = nrtPINVOKE.NDBuffer_copy_to_buffer_uint8__SWIG_0(swigCPtr, dst_buff, buff_size);
    return ret;
  }

  public int copy_to_buffer_uint8(int idx0, byte[] dst_buff, ulong buff_size) {
    int ret = nrtPINVOKE.NDBuffer_copy_to_buffer_uint8__SWIG_1(swigCPtr, idx0, dst_buff, buff_size);
    return ret;
  }

  public int copy_to_buffer_int16(short[] dst_buff, ulong buff_size) {
    int ret = nrtPINVOKE.NDBuffer_copy_to_buffer_int16__SWIG_0(swigCPtr, dst_buff, buff_size);
    return ret;
  }

  public int copy_to_buffer_int16(int idx0, short[] dst_buff, ulong buff_size) {
    int ret = nrtPINVOKE.NDBuffer_copy_to_buffer_int16__SWIG_1(swigCPtr, idx0, dst_buff, buff_size);
    return ret;
  }

  public int copy_to_buffer_uint16(ushort[] dst_buff, ulong buff_size) {
    int ret = nrtPINVOKE.NDBuffer_copy_to_buffer_uint16__SWIG_0(swigCPtr, dst_buff, buff_size);
    return ret;
  }

  public int copy_to_buffer_uint16(int idx0, ushort[] dst_buff, ulong buff_size) {
    int ret = nrtPINVOKE.NDBuffer_copy_to_buffer_uint16__SWIG_1(swigCPtr, idx0, dst_buff, buff_size);
    return ret;
  }

  public int copy_to_buffer_int32(int[] dst_buff, ulong buff_size) {
    int ret = nrtPINVOKE.NDBuffer_copy_to_buffer_int32__SWIG_0(swigCPtr, dst_buff, buff_size);
    return ret;
  }

  public int copy_to_buffer_int32(int idx0, int[] dst_buff, ulong buff_size) {
    int ret = nrtPINVOKE.NDBuffer_copy_to_buffer_int32__SWIG_1(swigCPtr, idx0, dst_buff, buff_size);
    return ret;
  }

  public int copy_to_buffer_uint32(uint[] dst_buff, ulong buff_size) {
    int ret = nrtPINVOKE.NDBuffer_copy_to_buffer_uint32__SWIG_0(swigCPtr, dst_buff, buff_size);
    return ret;
  }

  public int copy_to_buffer_uint32(int idx0, uint[] dst_buff, ulong buff_size) {
    int ret = nrtPINVOKE.NDBuffer_copy_to_buffer_uint32__SWIG_1(swigCPtr, idx0, dst_buff, buff_size);
    return ret;
  }

  public int copy_to_buffer_int64(long[] dst_buff, ulong buff_size) {
    int ret = nrtPINVOKE.NDBuffer_copy_to_buffer_int64__SWIG_0(swigCPtr, dst_buff, buff_size);
    return ret;
  }

  public int copy_to_buffer_int64(int idx0, long[] dst_buff, ulong buff_size) {
    int ret = nrtPINVOKE.NDBuffer_copy_to_buffer_int64__SWIG_1(swigCPtr, idx0, dst_buff, buff_size);
    return ret;
  }

  public int copy_to_buffer_uint64(ulong[] dst_buff, ulong buff_size) {
    int ret = nrtPINVOKE.NDBuffer_copy_to_buffer_uint64__SWIG_0(swigCPtr, dst_buff, buff_size);
    return ret;
  }

  public int copy_to_buffer_uint64(int idx0, ulong[] dst_buff, ulong buff_size) {
    int ret = nrtPINVOKE.NDBuffer_copy_to_buffer_uint64__SWIG_1(swigCPtr, idx0, dst_buff, buff_size);
    return ret;
  }

  public int copy_to_buffer_float32(float[] dst_buff, ulong buff_size) {
    int ret = nrtPINVOKE.NDBuffer_copy_to_buffer_float32__SWIG_0(swigCPtr, dst_buff, buff_size);
    return ret;
  }

  public int copy_to_buffer_float32(int idx0, float[] dst_buff, ulong buff_size) {
    int ret = nrtPINVOKE.NDBuffer_copy_to_buffer_float32__SWIG_1(swigCPtr, idx0, dst_buff, buff_size);
    return ret;
  }

  public int copy_to_buffer_float64(double[] dst_buff, ulong buff_size) {
    int ret = nrtPINVOKE.NDBuffer_copy_to_buffer_float64__SWIG_0(swigCPtr, dst_buff, buff_size);
    return ret;
  }

  public int copy_to_buffer_float64(int idx0, double[] dst_buff, ulong buff_size) {
    int ret = nrtPINVOKE.NDBuffer_copy_to_buffer_float64__SWIG_1(swigCPtr, idx0, dst_buff, buff_size);
    return ret;
  }

}

}
namespace nrt {

public class NDBufferList : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal NDBufferList(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(NDBufferList obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(NDBufferList obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~NDBufferList() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_NDBufferList(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public NDBufferList() : this(nrtPINVOKE.new_NDBufferList__SWIG_0(), true) {
  }

  public NDBufferList(NDBufferList src) : this(nrtPINVOKE.new_NDBufferList__SWIG_1(NDBufferList.getCPtr(src)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public ulong get_count() {
    ulong ret = nrtPINVOKE.NDBufferList_get_count(swigCPtr);
    return ret;
  }

  public void append(NDBuffer ndbuffer) {
    nrtPINVOKE.NDBufferList_append(swigCPtr, NDBuffer.getCPtr(ndbuffer));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public NDBuffer get_at(int idx1) {
    NDBuffer ret = new NDBuffer(nrtPINVOKE.NDBufferList_get_at__SWIG_0(swigCPtr, idx1), false);
    return ret;
  }

  public NDBuffer get_data_ptr() {
    global::System.IntPtr cPtr = nrtPINVOKE.NDBufferList_get_data_ptr__SWIG_0(swigCPtr);
    NDBuffer ret = (cPtr == global::System.IntPtr.Zero) ? null : new NDBuffer(cPtr, false);
    return ret;
  }

  public void resize(int size) {
    nrtPINVOKE.NDBufferList_resize(swigCPtr, size);
  }

  public void clear() {
    nrtPINVOKE.NDBufferList_clear(swigCPtr);
  }

}

}
namespace nrt {

public enum DevType {
  DEVICE_NONE = 0,
  DEVICE_CPU = 1,
  DEVICE_CUDA_GPU = 2,
  DEVICE_OPEN_VINO = 3,
  DEVICE_DIRECT_ML_GPU = 4
}

}
namespace nrt {

public class Device : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Device(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Device obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Device obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Device() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_Device(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public DevType devtype {
    set {
      nrtPINVOKE.Device_devtype_set(swigCPtr, (int)value);
    } 
    get {
      DevType ret = (DevType)nrtPINVOKE.Device_devtype_get(swigCPtr);
      return ret;
    } 
  }

  public int id {
    set {
      nrtPINVOKE.Device_id_set(swigCPtr, value);
    } 
    get {
      int ret = nrtPINVOKE.Device_id_get(swigCPtr);
      return ret;
    } 
  }

  public static int get_num_devices(DevType type) {
    int ret = nrtPINVOKE.Device_get_num_devices__SWIG_0((int)type);
    return ret;
  }

  public static int get_num_devices() {
    int ret = nrtPINVOKE.Device_get_num_devices__SWIG_1();
    return ret;
  }

  public static Device get_device(int index, DevType type) {
    Device ret = new Device(nrtPINVOKE.Device_get_device__SWIG_0(index, (int)type), true);
    return ret;
  }

  public static Device get_device(int index) {
    Device ret = new Device(nrtPINVOKE.Device_get_device__SWIG_1(index), true);
    return ret;
  }

  public static Device get_gpu_device(int index) {
    Device ret = new Device(nrtPINVOKE.Device_get_gpu_device__SWIG_0(index), true);
    return ret;
  }

  public static Device get_gpu_device(int index, DevType type) {
    Device ret = new Device(nrtPINVOKE.Device_get_gpu_device__SWIG_1(index, (int)type), true);
    return ret;
  }

  public static Device get_cpu_device() {
    Device ret = new Device(nrtPINVOKE.Device_get_cpu_device__SWIG_0(), true);
    return ret;
  }

  public static Device get_cpu_device(DevType type) {
    Device ret = new Device(nrtPINVOKE.Device_get_cpu_device__SWIG_1((int)type), true);
    return ret;
  }

  public static StringVector list_available_devices(DevType type) {
    StringVector ret = new StringVector(nrtPINVOKE.Device_list_available_devices__SWIG_0((int)type), true);
    return ret;
  }

  public static StringVector list_available_devices() {
    StringVector ret = new StringVector(nrtPINVOKE.Device_list_available_devices__SWIG_1(), true);
    return ret;
  }

  public static int get_num_gpu_devices() {
    int ret = nrtPINVOKE.Device_get_num_gpu_devices();
    return ret;
  }

  public static Status get_gpu_mem_info(int gid, ref ulong free_mem, ref ulong total_mem) {
    Status ret = (Status)nrtPINVOKE.Device_get_gpu_mem_info(gid, ref free_mem, ref total_mem);
    return ret;
  }

  public string get_device_name() {
    string ret = nrtPINVOKE.Device_get_device_name(swigCPtr);
    return ret;
  }

  public Device() : this(nrtPINVOKE.new_Device(), true) {
  }

}

}
namespace nrt {

public class Dict : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Dict(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Dict obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Dict obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Dict() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_Dict(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Dict() : this(nrtPINVOKE.new_Dict__SWIG_0(), true) {
  }

  public Dict(Dict src) : this(nrtPINVOKE.new_Dict__SWIG_1(Dict.getCPtr(src)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public Status put(string key, NDBuffer val) {
    Status ret = (Status)nrtPINVOKE.Dict_put(swigCPtr, key, NDBuffer.getCPtr(val));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool has_key(string key) {
    bool ret = nrtPINVOKE.Dict_has_key(swigCPtr, key);
    return ret;
  }

  public NDBuffer get(string key) {
    NDBuffer ret = new NDBuffer(nrtPINVOKE.Dict_get(swigCPtr, key), false);
    return ret;
  }

  public Status remove(string key) {
    Status ret = (Status)nrtPINVOKE.Dict_remove(swigCPtr, key);
    return ret;
  }

  public ulong get_count() {
    ulong ret = nrtPINVOKE.Dict_get_count(swigCPtr);
    return ret;
  }

  public void clear() {
    nrtPINVOKE.Dict_clear(swigCPtr);
  }

}

}
namespace nrt {

public enum PaddingOpt {
  PADD_BOTTOM_RIGHT = 0,
  PADD_CENTER = 1
}

}
namespace nrt {

public enum ModelType {
  NONE = 0,
  CLASSIFICATION = 1,
  SEGMENTATION = 2,
  DETECTION = 3,
  OCR = 4,
  ANOMALY = 5,
  ROTATION = 6,
  ANOMALY_CLASSIFICATION = 7,
  ANOMALY_SEGMENTATION = 8,
  PATCHED_CLASSIFICATION = 9
}

}
namespace nrt {

public class Model : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Model(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Model obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Model obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Model() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_Model(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Model() : this(nrtPINVOKE.new_Model__SWIG_0(), true) {
  }

  public Model(string modelpath, int output_opt) : this(nrtPINVOKE.new_Model__SWIG_1(modelpath, output_opt), true) {
  }

  public Model(string modelpath) : this(nrtPINVOKE.new_Model__SWIG_2(modelpath), true) {
  }

  public Model(string modelpath, bool threshold_flag, int output_opt) : this(nrtPINVOKE.new_Model__SWIG_3(modelpath, threshold_flag, output_opt), true) {
  }

  public Model(string modelpath, bool threshold_flag) : this(nrtPINVOKE.new_Model__SWIG_4(modelpath, threshold_flag), true) {
  }

  public Model(Model src) : this(nrtPINVOKE.new_Model__SWIG_5(Model.getCPtr(src)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public ModelType get_model_type() {
    ModelType ret = (ModelType)nrtPINVOKE.Model_get_model_type__SWIG_0(swigCPtr);
    return ret;
  }

  public string get_model_version() {
    string ret = nrtPINVOKE.Model_get_model_version(swigCPtr);
    return ret;
  }

  public Status get_status() {
    Status ret = (Status)nrtPINVOKE.Model_get_status(swigCPtr);
    return ret;
  }

  public int get_num_inputs() {
    int ret = nrtPINVOKE.Model_get_num_inputs(swigCPtr);
    return ret;
  }

  public Shape get_input_shape(int input_index) {
    Shape ret = new Shape(nrtPINVOKE.Model_get_input_shape(swigCPtr, input_index), true);
    return ret;
  }

  public Shape get_rotocr_input_shape(int input_index) {
    Shape ret = new Shape(nrtPINVOKE.Model_get_rotocr_input_shape(swigCPtr, input_index), true);
    return ret;
  }

  public DType get_input_dtype(int input_index) {
    DType ret = (DType)nrtPINVOKE.Model_get_input_dtype(swigCPtr, input_index);
    return ret;
  }

  public string get_input_name(int input_index) {
    string ret = nrtPINVOKE.Model_get_input_name(swigCPtr, input_index);
    return ret;
  }

  public InterpolationType get_InterpolationType(int input_index) {
    InterpolationType ret = (InterpolationType)nrtPINVOKE.Model_get_InterpolationType__SWIG_0(swigCPtr, input_index);
    return ret;
  }

  public bool is_patch_mode(int input_index) {
    bool ret = nrtPINVOKE.Model_is_patch_mode__SWIG_0(swigCPtr, input_index);
    return ret;
  }

  public float get_scale_factor() {
    float ret = nrtPINVOKE.Model_get_scale_factor__SWIG_0(swigCPtr);
    return ret;
  }

  public int get_num_outputs() {
    int ret = nrtPINVOKE.Model_get_num_outputs(swigCPtr);
    return ret;
  }

  public Shape get_output_shape(int output_index) {
    Shape ret = new Shape(nrtPINVOKE.Model_get_output_shape(swigCPtr, output_index), true);
    return ret;
  }

  public DType get_output_dtype(int output_index) {
    DType ret = (DType)nrtPINVOKE.Model_get_output_dtype(swigCPtr, output_index);
    return ret;
  }

  public string get_output_name(int output_index) {
    string ret = nrtPINVOKE.Model_get_output_name(swigCPtr, output_index);
    return ret;
  }

  public int get_output_flag(int output_index) {
    int ret = nrtPINVOKE.Model_get_output_flag(swigCPtr, output_index);
    return ret;
  }

  public int get_num_classes() {
    int ret = nrtPINVOKE.Model_get_num_classes(swigCPtr);
    return ret;
  }

  public string get_class_name(int class_index) {
    string ret = nrtPINVOKE.Model_get_class_name(swigCPtr, class_index);
    return ret;
  }

  public string get_model_name() {
    string ret = nrtPINVOKE.Model_get_model_name(swigCPtr);
    return ret;
  }

  public string get_training_type() {
    string ret = nrtPINVOKE.Model_get_training_type(swigCPtr);
    return ret;
  }

  public int get_training_inference_time_level() {
    int ret = nrtPINVOKE.Model_get_training_inference_time_level(swigCPtr);
    return ret;
  }

  public int get_training_search_space_level() {
    int ret = nrtPINVOKE.Model_get_training_search_space_level(swigCPtr);
    return ret;
  }

  public ThresholdMode get_threshold_mode() {
    ThresholdMode ret = (ThresholdMode)nrtPINVOKE.Model_get_threshold_mode__SWIG_0(swigCPtr);
    return ret;
  }

  public NDBuffer get_prob_threshold() {
    NDBuffer ret = new NDBuffer(nrtPINVOKE.Model_get_prob_threshold__SWIG_0(swigCPtr), true);
    return ret;
  }

  public NDBuffer get_size_threshold() {
    NDBuffer ret = new NDBuffer(nrtPINVOKE.Model_get_size_threshold__SWIG_0(swigCPtr), true);
    return ret;
  }

  public NDBuffer get_preprocessing_input_size() {
    NDBuffer ret = new NDBuffer(nrtPINVOKE.Model_get_preprocessing_input_size__SWIG_0(swigCPtr), true);
    return ret;
  }

  public NDBuffer get_roi_info() {
    NDBuffer ret = new NDBuffer(nrtPINVOKE.Model_get_roi_info__SWIG_0(swigCPtr), true);
    return ret;
  }

  public NDBuffer get_mask_info() {
    NDBuffer ret = new NDBuffer(nrtPINVOKE.Model_get_mask_info__SWIG_0(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_std__optionalT_nrt__TextRule_t get_text_rule() {
    SWIGTYPE_p_std__optionalT_nrt__TextRule_t ret = new SWIGTYPE_p_std__optionalT_nrt__TextRule_t(nrtPINVOKE.Model_get_text_rule__SWIG_0(swigCPtr), false);
    return ret;
  }

  public void set_text_rule(SWIGTYPE_p_std__optionalT_nrt__TextRule_t new_text_rule) {
    nrtPINVOKE.Model_set_text_rule__SWIG_0(swigCPtr, SWIGTYPE_p_std__optionalT_nrt__TextRule_t.getCPtr(new_text_rule));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool has_io_flag(int flag) {
    bool ret = nrtPINVOKE.Model_has_io_flag(swigCPtr, flag);
    return ret;
  }

  public Status destroy() {
    Status ret = (Status)nrtPINVOKE.Model_destroy(swigCPtr);
    return ret;
  }

  public static readonly int MODELIO_DEFAULT = nrtPINVOKE.Model_MODELIO_DEFAULT_get();
  public static readonly int MODELIO_IN_IMAGE = nrtPINVOKE.Model_MODELIO_IN_IMAGE_get();
  public static readonly int MODELIO_OUT_PRED = nrtPINVOKE.Model_MODELIO_OUT_PRED_get();
  public static readonly int MODELIO_OUT_PROB = nrtPINVOKE.Model_MODELIO_OUT_PROB_get();
  public static readonly int MODELIO_OUT_CAM = nrtPINVOKE.Model_MODELIO_OUT_CAM_get();
  public static readonly int MODELIO_OUT_ANOMALY_SCORE = nrtPINVOKE.Model_MODELIO_OUT_ANOMALY_SCORE_get();
  public static readonly int MODELIO_OUT_ROTATION_DEGREE = nrtPINVOKE.Model_MODELIO_OUT_ROTATION_DEGREE_get();

}

}
namespace nrt {

public class ExecutorConfig : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ExecutorConfig(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ExecutorConfig obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ExecutorConfig obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ExecutorConfig() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_ExecutorConfig(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ExecutorConfig() : this(nrtPINVOKE.new_ExecutorConfig__SWIG_0(), true) {
  }

  public ExecutorConfig(ExecutorConfig src) : this(nrtPINVOKE.new_ExecutorConfig__SWIG_1(ExecutorConfig.getCPtr(src)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public ExecutorConfig set_fp16flag(bool flag) {
    ExecutorConfig ret = new ExecutorConfig(nrtPINVOKE.ExecutorConfig_set_fp16flag(swigCPtr, flag), false);
    return ret;
  }

  public bool get_fp16flag() {
    bool ret = nrtPINVOKE.ExecutorConfig_get_fp16flag(swigCPtr);
    return ret;
  }

  public ExecutorConfig set_workspace_size(ulong workspace_size) {
    ExecutorConfig ret = new ExecutorConfig(nrtPINVOKE.ExecutorConfig_set_workspace_size(swigCPtr, workspace_size), false);
    return ret;
  }

  public ulong get_workspace_size() {
    ulong ret = nrtPINVOKE.ExecutorConfig_get_workspace_size(swigCPtr);
    return ret;
  }

}

}
namespace nrt {

public class Executor : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Executor(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Executor obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Executor obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Executor() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_Executor(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Executor() : this(nrtPINVOKE.new_Executor__SWIG_0(), true) {
  }

  public Executor(Model model, Device device, int batch_size, ExecutorConfig config) : this(nrtPINVOKE.new_Executor__SWIG_1(Model.getCPtr(model), Device.getCPtr(device), batch_size, ExecutorConfig.getCPtr(config)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public Executor(Model model, Device device, int batch_size) : this(nrtPINVOKE.new_Executor__SWIG_2(Model.getCPtr(model), Device.getCPtr(device), batch_size), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public Executor(Model model, Device device) : this(nrtPINVOKE.new_Executor__SWIG_3(Model.getCPtr(model), Device.getCPtr(device)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public Executor(Model model, Device device, string executor_path) : this(nrtPINVOKE.new_Executor__SWIG_4(Model.getCPtr(model), Device.getCPtr(device), executor_path), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public Executor(Executor src) : this(nrtPINVOKE.new_Executor__SWIG_5(Executor.getCPtr(src)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public Status execute(NDBuffer input, NDBufferList outputs) {
    Status ret = (Status)nrtPINVOKE.Executor_execute__SWIG_0(swigCPtr, NDBuffer.getCPtr(input), NDBufferList.getCPtr(outputs));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Status execute(NDBufferList inputs, NDBufferList outputs) {
    Status ret = (Status)nrtPINVOKE.Executor_execute__SWIG_1(swigCPtr, NDBufferList.getCPtr(inputs), NDBufferList.getCPtr(outputs));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Status save_executor(string executor_path) {
    Status ret = (Status)nrtPINVOKE.Executor_save_executor(swigCPtr, executor_path);
    return ret;
  }

  public Status get_status() {
    Status ret = (Status)nrtPINVOKE.Executor_get_status(swigCPtr);
    return ret;
  }

  public Status destroy() {
    Status ret = (Status)nrtPINVOKE.Executor_destroy(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_nrt__Executor__ExecutorImpl get_internalptr() {
    global::System.IntPtr cPtr = nrtPINVOKE.Executor_get_internalptr(swigCPtr);
    SWIGTYPE_p_nrt__Executor__ExecutorImpl ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_nrt__Executor__ExecutorImpl(cPtr, false);
    return ret;
  }

}

}
namespace nrt {

public class Predictor : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Predictor(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Predictor obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Predictor obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Predictor() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_Predictor(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Predictor() : this(nrtPINVOKE.new_Predictor__SWIG_0(), true) {
  }

  public Predictor(string model_path, int modelio_flag, int device_idx, int batch_size, bool fp16_flag, bool threshold_flag, DevType type) : this(nrtPINVOKE.new_Predictor__SWIG_1(model_path, modelio_flag, device_idx, batch_size, fp16_flag, threshold_flag, (int)type), true) {
  }

  public Predictor(string model_path, int modelio_flag, int device_idx, int batch_size, bool fp16_flag, bool threshold_flag) : this(nrtPINVOKE.new_Predictor__SWIG_2(model_path, modelio_flag, device_idx, batch_size, fp16_flag, threshold_flag), true) {
  }

  public Predictor(string model_path, int modelio_flag, int device_idx, int batch_size, bool fp16_flag) : this(nrtPINVOKE.new_Predictor__SWIG_3(model_path, modelio_flag, device_idx, batch_size, fp16_flag), true) {
  }

  public Predictor(string model_path, int modelio_flag, int device_idx, int batch_size) : this(nrtPINVOKE.new_Predictor__SWIG_4(model_path, modelio_flag, device_idx, batch_size), true) {
  }

  public Predictor(string model_path, int modelio_flag, int device_idx) : this(nrtPINVOKE.new_Predictor__SWIG_5(model_path, modelio_flag, device_idx), true) {
  }

  public Predictor(string model_path, int modelio_flag) : this(nrtPINVOKE.new_Predictor__SWIG_6(model_path, modelio_flag), true) {
  }

  public Predictor(string model_path) : this(nrtPINVOKE.new_Predictor__SWIG_7(model_path), true) {
  }

  public Predictor(int device_idx, string predictor_path, bool threshold_flag) : this(nrtPINVOKE.new_Predictor__SWIG_8(device_idx, predictor_path, threshold_flag), true) {
  }

  public Predictor(int device_idx, string predictor_path) : this(nrtPINVOKE.new_Predictor__SWIG_9(device_idx, predictor_path), true) {
  }

  public Predictor(int device_idx, PredictorEngine predictor_engine, bool threshold_flag) : this(nrtPINVOKE.new_Predictor__SWIG_10(device_idx, PredictorEngine.getCPtr(predictor_engine), threshold_flag), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public Predictor(int device_idx, PredictorEngine predictor_engine) : this(nrtPINVOKE.new_Predictor__SWIG_11(device_idx, PredictorEngine.getCPtr(predictor_engine)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public Predictor(Predictor src) : this(nrtPINVOKE.new_Predictor__SWIG_12(Predictor.getCPtr(src)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public string get_model_name() {
    string ret = nrtPINVOKE.Predictor_get_model_name(swigCPtr);
    return ret;
  }

  public ModelType get_model_type() {
    ModelType ret = (ModelType)nrtPINVOKE.Predictor_get_model_type(swigCPtr);
    return ret;
  }

  public string get_model_version() {
    string ret = nrtPINVOKE.Predictor_get_model_version(swigCPtr);
    return ret;
  }

  public int get_num_classes() {
    int ret = nrtPINVOKE.Predictor_get_num_classes(swigCPtr);
    return ret;
  }

  public string get_class_name(int class_index) {
    string ret = nrtPINVOKE.Predictor_get_class_name(swigCPtr, class_index);
    return ret;
  }

  public bool is_patch_mode(int input_index) {
    bool ret = nrtPINVOKE.Predictor_is_patch_mode__SWIG_0(swigCPtr, input_index);
    return ret;
  }

  public bool is_patch_mode() {
    bool ret = nrtPINVOKE.Predictor_is_patch_mode__SWIG_1(swigCPtr);
    return ret;
  }

  public float get_scale_factor() {
    float ret = nrtPINVOKE.Predictor_get_scale_factor(swigCPtr);
    return ret;
  }

  public ThresholdMode get_threshold_mode() {
    ThresholdMode ret = (ThresholdMode)nrtPINVOKE.Predictor_get_threshold_mode(swigCPtr);
    return ret;
  }

  public NDBuffer get_prob_threshold() {
    NDBuffer ret = new NDBuffer(nrtPINVOKE.Predictor_get_prob_threshold(swigCPtr), true);
    return ret;
  }

  public NDBuffer get_size_threshold() {
    NDBuffer ret = new NDBuffer(nrtPINVOKE.Predictor_get_size_threshold(swigCPtr), true);
    return ret;
  }

  public NDBuffer get_preprocessing_input_size() {
    NDBuffer ret = new NDBuffer(nrtPINVOKE.Predictor_get_preprocessing_input_size(swigCPtr), true);
    return ret;
  }

  public NDBuffer get_roi_info() {
    NDBuffer ret = new NDBuffer(nrtPINVOKE.Predictor_get_roi_info(swigCPtr), true);
    return ret;
  }

  public NDBuffer get_mask_info() {
    NDBuffer ret = new NDBuffer(nrtPINVOKE.Predictor_get_mask_info(swigCPtr), true);
    return ret;
  }

  public int get_device_type() {
    int ret = nrtPINVOKE.Predictor_get_device_type(swigCPtr);
    return ret;
  }

  public int get_batch_size() {
    int ret = nrtPINVOKE.Predictor_get_batch_size(swigCPtr);
    return ret;
  }

  public Status save_predictor(string predictor_path) {
    Status ret = (Status)nrtPINVOKE.Predictor_save_predictor__SWIG_0(swigCPtr, predictor_path);
    return ret;
  }

  public Status save_predictor(PredictorEngine predictor_engine) {
    Status ret = (Status)nrtPINVOKE.Predictor_save_predictor__SWIG_1(swigCPtr, PredictorEngine.getCPtr(predictor_engine));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Status execute(NDBuffer input, NDBufferList outputs) {
    Status ret = (Status)nrtPINVOKE.Predictor_execute__SWIG_0(swigCPtr, NDBuffer.getCPtr(input), NDBufferList.getCPtr(outputs));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Status execute(NDBufferList inputs, NDBufferList outputs) {
    Status ret = (Status)nrtPINVOKE.Predictor_execute__SWIG_1(swigCPtr, NDBufferList.getCPtr(inputs), NDBufferList.getCPtr(outputs));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Result predict(Input input) {
    Result ret = new Result(nrtPINVOKE.Predictor_predict(swigCPtr, Input.getCPtr(input)), true);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Status get_status() {
    Status ret = (Status)nrtPINVOKE.Predictor_get_status(swigCPtr);
    return ret;
  }

  public Status destroy() {
    Status ret = (Status)nrtPINVOKE.Predictor_destroy(swigCPtr);
    return ret;
  }

}

}
namespace nrt {

public class PredictorEngine : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PredictorEngine(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PredictorEngine obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(PredictorEngine obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~PredictorEngine() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_PredictorEngine(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public PredictorEngine() : this(nrtPINVOKE.new_PredictorEngine__SWIG_0(), true) {
  }

  public PredictorEngine(PredictorEngine src) : this(nrtPINVOKE.new_PredictorEngine__SWIG_1(PredictorEngine.getCPtr(src)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
namespace nrt {

public class Input : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Input(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Input obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Input obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Input() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_Input(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Input() : this(nrtPINVOKE.new_Input__SWIG_0(), true) {
  }

  public Input(string image_paths, int channel_sz) : this(nrtPINVOKE.new_Input__SWIG_1(image_paths, channel_sz), true) {
  }

  public Input(string image_paths) : this(nrtPINVOKE.new_Input__SWIG_2(image_paths), true) {
  }

  public Input(global::System.IntPtr addr, Shape shape, DType dtype) : this(nrtPINVOKE.new_Input__SWIG_3(addr, Shape.getCPtr(shape), (int)dtype), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public Input(NDBuffer ndbuff) : this(nrtPINVOKE.new_Input__SWIG_4(NDBuffer.getCPtr(ndbuff)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public Input(Input src) : this(nrtPINVOKE.new_Input__SWIG_5(Input.getCPtr(src)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public Status extend(string image_paths, int channel_sz) {
    Status ret = (Status)nrtPINVOKE.Input_extend__SWIG_0(swigCPtr, image_paths, channel_sz);
    return ret;
  }

  public Status extend(string image_paths) {
    Status ret = (Status)nrtPINVOKE.Input_extend__SWIG_1(swigCPtr, image_paths);
    return ret;
  }

  public Status extend(global::System.IntPtr addr, Shape shape, DType dtype) {
    Status ret = (Status)nrtPINVOKE.Input_extend__SWIG_2(swigCPtr, addr, Shape.getCPtr(shape), (int)dtype);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Status extend(NDBuffer ndbuff) {
    Status ret = (Status)nrtPINVOKE.Input_extend__SWIG_3(swigCPtr, NDBuffer.getCPtr(ndbuff));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ulong get_count() {
    ulong ret = nrtPINVOKE.Input_get_count(swigCPtr);
    return ret;
  }

  public NDBufferVector get_org_input_ndbuffs() {
    NDBufferVector ret = new NDBufferVector(nrtPINVOKE.Input_get_org_input_ndbuffs(swigCPtr), false);
    return ret;
  }

  public NDBuffer get_org_input_ndbuff(int batch_idx) {
    NDBuffer ret = new NDBuffer(nrtPINVOKE.Input_get_org_input_ndbuff(swigCPtr, batch_idx), false);
    return ret;
  }

  public Shape get_org_input_shape(int batch_idx) {
    Shape ret = new Shape(nrtPINVOKE.Input_get_org_input_shape(swigCPtr, batch_idx), false);
    return ret;
  }

  public NDBuffer get_org_input_shapes() {
    NDBuffer ret = new NDBuffer(nrtPINVOKE.Input_get_org_input_shapes__SWIG_0(swigCPtr), true);
    return ret;
  }

  public NDBuffer get_patch_info(int batch_idx) {
    NDBuffer ret = new NDBuffer(nrtPINVOKE.Input_get_patch_info(swigCPtr, batch_idx), false);
    return ret;
  }

  public NDBuffer get_input_ndbuff(Model model) {
    NDBuffer ret = new NDBuffer(nrtPINVOKE.Input_get_input_ndbuff__SWIG_0(swigCPtr, Model.getCPtr(model)), true);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public NDBuffer get_input_ndbuff(Predictor predictor) {
    NDBuffer ret = new NDBuffer(nrtPINVOKE.Input_get_input_ndbuff__SWIG_2(swigCPtr, Predictor.getCPtr(predictor)), true);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_overlap_ratio(float overlap_ratio) {
    nrtPINVOKE.Input_set_overlap_ratio__SWIG_0(swigCPtr, overlap_ratio);
  }

  public void set_overlap_ratio() {
    nrtPINVOKE.Input_set_overlap_ratio__SWIG_1(swigCPtr);
  }

  public float get_overlap_ratio() {
    float ret = nrtPINVOKE.Input_get_overlap_ratio__SWIG_0(swigCPtr);
    return ret;
  }

  public void clear() {
    nrtPINVOKE.Input_clear(swigCPtr);
  }

}

}
namespace nrt {

public class Class : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Class(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Class obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Class obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Class() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_Class(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Class() : this(nrtPINVOKE.new_Class__SWIG_0(), true) {
  }

  public Class(int class_idx) : this(nrtPINVOKE.new_Class__SWIG_1(class_idx), true) {
  }

  public Class(Class src) : this(nrtPINVOKE.new_Class__SWIG_2(Class.getCPtr(src)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public int idx {
    set {
      nrtPINVOKE.Class_idx_set(swigCPtr, value);
    } 
    get {
      int ret = nrtPINVOKE.Class_idx_get(swigCPtr);
      return ret;
    } 
  }

  public bool has_child() {
    bool ret = nrtPINVOKE.Class_has_child(swigCPtr);
    return ret;
  }

  public Result get_child_result() {
    Result ret = new Result(nrtPINVOKE.Class_get_child_result(swigCPtr), false);
    return ret;
  }

  public void set_child_result(Result result) {
    nrtPINVOKE.Class_set_child_result(swigCPtr, Result.getCPtr(result));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
namespace nrt {

public class ClassList : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ClassList(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ClassList obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ClassList obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ClassList() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_ClassList(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ClassList() : this(nrtPINVOKE.new_ClassList__SWIG_0(), true) {
  }

  public ClassList(ClassList src) : this(nrtPINVOKE.new_ClassList__SWIG_1(ClassList.getCPtr(src)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public ulong get_count() {
    ulong ret = nrtPINVOKE.ClassList_get_count(swigCPtr);
    return ret;
  }

  public void append(Class cla) {
    nrtPINVOKE.ClassList_append(swigCPtr, Class.getCPtr(cla));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public Class get(int batch_idx) {
    Class ret = new Class(nrtPINVOKE.ClassList_get__SWIG_0(swigCPtr, batch_idx), false);
    return ret;
  }

  public Class get() {
    Class ret = new Class(nrtPINVOKE.ClassList_get__SWIG_1(swigCPtr), false);
    return ret;
  }

  public bool empty() {
    bool ret = nrtPINVOKE.ClassList_empty(swigCPtr);
    return ret;
  }

  public void reserve(int size) {
    nrtPINVOKE.ClassList_reserve(swigCPtr, size);
  }

  public void resize(int size) {
    nrtPINVOKE.ClassList_resize(swigCPtr, size);
  }

  public void clear() {
    nrtPINVOKE.ClassList_clear(swigCPtr);
  }

  public void set_child_result(int batch_idx, Result result) {
    nrtPINVOKE.ClassList_set_child_result(swigCPtr, batch_idx, Result.getCPtr(result));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
namespace nrt {

public class ProbsList : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ProbsList(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ProbsList obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ProbsList obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ProbsList() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_ProbsList(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ProbsList() : this(nrtPINVOKE.new_ProbsList__SWIG_0(), true) {
  }

  public ProbsList(ProbsList src) : this(nrtPINVOKE.new_ProbsList__SWIG_1(ProbsList.getCPtr(src)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public ulong get_count() {
    ulong ret = nrtPINVOKE.ProbsList_get_count(swigCPtr);
    return ret;
  }

  public void append(FloatVector probs) {
    nrtPINVOKE.ProbsList_append(swigCPtr, FloatVector.getCPtr(probs));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public FloatVector get(int batch_idx) {
    FloatVector ret = new FloatVector(nrtPINVOKE.ProbsList_get__SWIG_0(swigCPtr, batch_idx), true);
    return ret;
  }

  public float get(int batch_idx, int class_idx) {
    float ret = nrtPINVOKE.ProbsList_get__SWIG_2(swigCPtr, batch_idx, class_idx);
    return ret;
  }

  public bool empty() {
    bool ret = nrtPINVOKE.ProbsList_empty(swigCPtr);
    return ret;
  }

  public void reserve(int size) {
    nrtPINVOKE.ProbsList_reserve(swigCPtr, size);
  }

  public void resize(int size) {
    nrtPINVOKE.ProbsList_resize(swigCPtr, size);
  }

  public void clear() {
    nrtPINVOKE.ProbsList_clear(swigCPtr);
  }

}

}
namespace nrt {

public class CAM : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CAM(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CAM obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(CAM obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~CAM() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_CAM(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public CAM() : this(nrtPINVOKE.new_CAM__SWIG_0(), true) {
  }

  public CAM(CAM src) : this(nrtPINVOKE.new_CAM__SWIG_1(CAM.getCPtr(src)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public int get_height() {
    int ret = nrtPINVOKE.CAM_get_height(swigCPtr);
    return ret;
  }

  public int get_width() {
    int ret = nrtPINVOKE.CAM_get_width(swigCPtr);
    return ret;
  }

  public global::System.IntPtr get_data_ptr() {
    global::System.IntPtr ret = nrtPINVOKE.CAM_get_data_ptr(swigCPtr);
    return ret;
  }

  public ulong get_byte_size() {
    ulong ret = nrtPINVOKE.CAM_get_byte_size(swigCPtr);
    return ret;
  }

  public void cam_to_numpy(SWIGTYPE_p_p_unsigned_char vec, SWIGTYPE_p_int n) {
    nrtPINVOKE.CAM_cam_to_numpy(swigCPtr, SWIGTYPE_p_p_unsigned_char.getCPtr(vec), SWIGTYPE_p_int.getCPtr(n));
  }

}

}
namespace nrt {

public class CAMList : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CAMList(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CAMList obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(CAMList obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~CAMList() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_CAMList(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public CAMList() : this(nrtPINVOKE.new_CAMList__SWIG_0(), true) {
  }

  public CAMList(NDBuffer cam_buff, NDBuffer org_shapes) : this(nrtPINVOKE.new_CAMList__SWIG_1(NDBuffer.getCPtr(cam_buff), NDBuffer.getCPtr(org_shapes)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public CAMList(NDBuffer cam_buff) : this(nrtPINVOKE.new_CAMList__SWIG_2(NDBuffer.getCPtr(cam_buff)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public CAMList(CAMList src) : this(nrtPINVOKE.new_CAMList__SWIG_3(CAMList.getCPtr(src)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public ulong get_count() {
    ulong ret = nrtPINVOKE.CAMList_get_count(swigCPtr);
    return ret;
  }

  public void append(CAM cam) {
    nrtPINVOKE.CAMList_append__SWIG_0(swigCPtr, CAM.getCPtr(cam));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public void append(int rows, int cols, global::System.IntPtr data) {
    nrtPINVOKE.CAMList_append__SWIG_1(swigCPtr, rows, cols, data);
  }

  public CAM get(int batch_idx) {
    CAM ret = new CAM(nrtPINVOKE.CAMList_get__SWIG_0(swigCPtr, batch_idx), false);
    return ret;
  }

  public CAM get() {
    CAM ret = new CAM(nrtPINVOKE.CAMList_get__SWIG_1(swigCPtr), false);
    return ret;
  }

  public bool empty() {
    bool ret = nrtPINVOKE.CAMList_empty(swigCPtr);
    return ret;
  }

  public void resize(int size) {
    nrtPINVOKE.CAMList_resize(swigCPtr, size);
  }

  public void clear() {
    nrtPINVOKE.CAMList_clear(swigCPtr);
  }

}

}
namespace nrt {

public class Point : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Point(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Point obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Point obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Point() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_Point(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Point() : this(nrtPINVOKE.new_Point__SWIG_0(), true) {
  }

  public Point(int _x, int _y) : this(nrtPINVOKE.new_Point__SWIG_1(_x, _y), true) {
  }

  public int x {
    set {
      nrtPINVOKE.Point_x_set(swigCPtr, value);
    } 
    get {
      int ret = nrtPINVOKE.Point_x_get(swigCPtr);
      return ret;
    } 
  }

  public int y {
    set {
      nrtPINVOKE.Point_y_set(swigCPtr, value);
    } 
    get {
      int ret = nrtPINVOKE.Point_y_get(swigCPtr);
      return ret;
    } 
  }

}

}
namespace nrt {

public class Points : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Points(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Points obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Points obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Points() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_Points(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Points() : this(nrtPINVOKE.new_Points__SWIG_0(), true) {
  }

  public Points(Points src) : this(nrtPINVOKE.new_Points__SWIG_1(Points.getCPtr(src)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public ulong get_count() {
    ulong ret = nrtPINVOKE.Points_get_count(swigCPtr);
    return ret;
  }

  public void append(Point point) {
    nrtPINVOKE.Points_append(swigCPtr, Point.getCPtr(point));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public Point get(int point_idx) {
    Point ret = new Point(nrtPINVOKE.Points_get__SWIG_0(swigCPtr, point_idx), false);
    return ret;
  }

  public Point get() {
    Point ret = new Point(nrtPINVOKE.Points_get__SWIG_1(swigCPtr), false);
    return ret;
  }

  public bool empty() {
    bool ret = nrtPINVOKE.Points_empty(swigCPtr);
    return ret;
  }

  public void resize(int size) {
    nrtPINVOKE.Points_resize(swigCPtr, size);
  }

  public void clear() {
    nrtPINVOKE.Points_clear(swigCPtr);
  }

}

}
namespace nrt {

public class PointsList : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PointsList(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PointsList obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(PointsList obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~PointsList() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_PointsList(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public PointsList() : this(nrtPINVOKE.new_PointsList__SWIG_0(), true) {
  }

  public PointsList(PointsList src) : this(nrtPINVOKE.new_PointsList__SWIG_1(PointsList.getCPtr(src)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public ulong get_count() {
    ulong ret = nrtPINVOKE.PointsList_get_count(swigCPtr);
    return ret;
  }

  public void append(Points points) {
    nrtPINVOKE.PointsList_append(swigCPtr, Points.getCPtr(points));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public Points get(int points_idx) {
    Points ret = new Points(nrtPINVOKE.PointsList_get__SWIG_0(swigCPtr, points_idx), false);
    return ret;
  }

  public Points get() {
    Points ret = new Points(nrtPINVOKE.PointsList_get__SWIG_1(swigCPtr), false);
    return ret;
  }

  public bool empty() {
    bool ret = nrtPINVOKE.PointsList_empty(swigCPtr);
    return ret;
  }

  public void resize(int size) {
    nrtPINVOKE.PointsList_resize(swigCPtr, size);
  }

  public void clear() {
    nrtPINVOKE.PointsList_clear(swigCPtr);
  }

}

}
namespace nrt {

public class Rect : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Rect(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Rect obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Rect obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Rect() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_Rect(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Rect() : this(nrtPINVOKE.new_Rect__SWIG_0(), true) {
  }

  public Rect(int _x, int _y, int _width, int _height) : this(nrtPINVOKE.new_Rect__SWIG_1(_x, _y, _width, _height), true) {
  }

  public int x {
    set {
      nrtPINVOKE.Rect_x_set(swigCPtr, value);
    } 
    get {
      int ret = nrtPINVOKE.Rect_x_get(swigCPtr);
      return ret;
    } 
  }

  public int y {
    set {
      nrtPINVOKE.Rect_y_set(swigCPtr, value);
    } 
    get {
      int ret = nrtPINVOKE.Rect_y_get(swigCPtr);
      return ret;
    } 
  }

  public int width {
    set {
      nrtPINVOKE.Rect_width_set(swigCPtr, value);
    } 
    get {
      int ret = nrtPINVOKE.Rect_width_get(swigCPtr);
      return ret;
    } 
  }

  public int height {
    set {
      nrtPINVOKE.Rect_height_set(swigCPtr, value);
    } 
    get {
      int ret = nrtPINVOKE.Rect_height_get(swigCPtr);
      return ret;
    } 
  }

}

}
namespace nrt {

public class Blob : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Blob(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Blob obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Blob obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Blob() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_Blob(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Blob() : this(nrtPINVOKE.new_Blob__SWIG_0(), true) {
  }

  public Blob(Blob src) : this(nrtPINVOKE.new_Blob__SWIG_1(Blob.getCPtr(src)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public Blob(SWIGTYPE_p_std__vectorT_nrt__Point_t contour, SWIGTYPE_p_std__vectorT_std__vectorT_nrt__Point_t_t holes, Rect rect, float mean_prob, int class_idx) : this(nrtPINVOKE.new_Blob__SWIG_2(SWIGTYPE_p_std__vectorT_nrt__Point_t.getCPtr(contour), SWIGTYPE_p_std__vectorT_std__vectorT_nrt__Point_t_t.getCPtr(holes), Rect.getCPtr(rect), mean_prob, class_idx), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public int batch_idx {
    set {
      nrtPINVOKE.Blob_batch_idx_set(swigCPtr, value);
    } 
    get {
      int ret = nrtPINVOKE.Blob_batch_idx_get(swigCPtr);
      return ret;
    } 
  }

  public int class_idx {
    set {
      nrtPINVOKE.Blob_class_idx_set(swigCPtr, value);
    } 
    get {
      int ret = nrtPINVOKE.Blob_class_idx_get(swigCPtr);
      return ret;
    } 
  }

  public Rect rect {
    set {
      nrtPINVOKE.Blob_rect_set(swigCPtr, Rect.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = nrtPINVOKE.Blob_rect_get(swigCPtr);
      Rect ret = (cPtr == global::System.IntPtr.Zero) ? null : new Rect(cPtr, false);
      return ret;
    } 
  }

  public ulong area {
    set {
      nrtPINVOKE.Blob_area_set(swigCPtr, value);
    } 
    get {
      ulong ret = nrtPINVOKE.Blob_area_get(swigCPtr);
      return ret;
    } 
  }

  public float prob {
    set {
      nrtPINVOKE.Blob_prob_set(swigCPtr, value);
    } 
    get {
      float ret = nrtPINVOKE.Blob_prob_get(swigCPtr);
      return ret;
    } 
  }

  public Points get_contour() {
    Points ret = new Points(nrtPINVOKE.Blob_get_contour(swigCPtr), true);
    return ret;
  }

  public PointsList get_holes() {
    PointsList ret = new PointsList(nrtPINVOKE.Blob_get_holes(swigCPtr), true);
    return ret;
  }

  public Points get_vertical_central_points() {
    Points ret = new Points(nrtPINVOKE.Blob_get_vertical_central_points(swigCPtr), true);
    return ret;
  }

  public Points get_skeleton_points() {
    Points ret = new Points(nrtPINVOKE.Blob_get_skeleton_points(swigCPtr), true);
    return ret;
  }

  public bool has_child() {
    bool ret = nrtPINVOKE.Blob_has_child(swigCPtr);
    return ret;
  }

  public Result get_child_result() {
    Result ret = new Result(nrtPINVOKE.Blob_get_child_result(swigCPtr), false);
    return ret;
  }

  public void set_child_result(Result result) {
    nrtPINVOKE.Blob_set_child_result(swigCPtr, Result.getCPtr(result));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
namespace nrt {

public class BlobList : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BlobList(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BlobList obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(BlobList obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~BlobList() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_BlobList(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public BlobList() : this(nrtPINVOKE.new_BlobList__SWIG_0(), true) {
  }

  public BlobList(BlobList src) : this(nrtPINVOKE.new_BlobList__SWIG_1(BlobList.getCPtr(src)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public ulong get_count() {
    ulong ret = nrtPINVOKE.BlobList_get_count(swigCPtr);
    return ret;
  }

  public void append(Blob blob) {
    nrtPINVOKE.BlobList_append(swigCPtr, Blob.getCPtr(blob));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public Blob get(int blob_idx) {
    Blob ret = new Blob(nrtPINVOKE.BlobList_get__SWIG_0(swigCPtr, blob_idx), false);
    return ret;
  }

  public Blob get() {
    Blob ret = new Blob(nrtPINVOKE.BlobList_get__SWIG_1(swigCPtr), false);
    return ret;
  }

  public bool empty() {
    bool ret = nrtPINVOKE.BlobList_empty(swigCPtr);
    return ret;
  }

  public void resize(int size) {
    nrtPINVOKE.BlobList_resize(swigCPtr, size);
  }

  public void clear() {
    nrtPINVOKE.BlobList_clear(swigCPtr);
  }

  public void set_child_result(int blob_idx, Result result) {
    nrtPINVOKE.BlobList_set_child_result(swigCPtr, blob_idx, Result.getCPtr(result));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
namespace nrt {

public class Bbox : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Bbox(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Bbox obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Bbox obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Bbox() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_Bbox(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Bbox() : this(nrtPINVOKE.new_Bbox__SWIG_0(), true) {
  }

  public Bbox(int batch_idx, int class_idx, int x, int y, int w, int h) : this(nrtPINVOKE.new_Bbox__SWIG_1(batch_idx, class_idx, x, y, w, h), true) {
  }

  public Bbox(int batch_idx, int class_idx, Rect rect) : this(nrtPINVOKE.new_Bbox__SWIG_2(batch_idx, class_idx, Rect.getCPtr(rect)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public Bbox(Bbox src) : this(nrtPINVOKE.new_Bbox__SWIG_3(Bbox.getCPtr(src)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public int batch_idx {
    set {
      nrtPINVOKE.Bbox_batch_idx_set(swigCPtr, value);
    } 
    get {
      int ret = nrtPINVOKE.Bbox_batch_idx_get(swigCPtr);
      return ret;
    } 
  }

  public int class_idx {
    set {
      nrtPINVOKE.Bbox_class_idx_set(swigCPtr, value);
    } 
    get {
      int ret = nrtPINVOKE.Bbox_class_idx_get(swigCPtr);
      return ret;
    } 
  }

  public Rect rect {
    set {
      nrtPINVOKE.Bbox_rect_set(swigCPtr, Rect.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = nrtPINVOKE.Bbox_rect_get(swigCPtr);
      Rect ret = (cPtr == global::System.IntPtr.Zero) ? null : new Rect(cPtr, false);
      return ret;
    } 
  }

  public bool has_child() {
    bool ret = nrtPINVOKE.Bbox_has_child(swigCPtr);
    return ret;
  }

  public Result get_child_result() {
    Result ret = new Result(nrtPINVOKE.Bbox_get_child_result(swigCPtr), false);
    return ret;
  }

  public void set_child_result(Result result) {
    nrtPINVOKE.Bbox_set_child_result(swigCPtr, Result.getCPtr(result));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
namespace nrt {

public class BboxList : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BboxList(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BboxList obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(BboxList obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~BboxList() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_BboxList(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public BboxList() : this(nrtPINVOKE.new_BboxList__SWIG_0(), true) {
  }

  public BboxList(BboxList src) : this(nrtPINVOKE.new_BboxList__SWIG_1(BboxList.getCPtr(src)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public ulong get_count() {
    ulong ret = nrtPINVOKE.BboxList_get_count(swigCPtr);
    return ret;
  }

  public void append(Bbox bbox) {
    nrtPINVOKE.BboxList_append(swigCPtr, Bbox.getCPtr(bbox));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public Bbox get(int bbox_idx) {
    Bbox ret = new Bbox(nrtPINVOKE.BboxList_get__SWIG_0(swigCPtr, bbox_idx), false);
    return ret;
  }

  public Bbox get() {
    Bbox ret = new Bbox(nrtPINVOKE.BboxList_get__SWIG_1(swigCPtr), false);
    return ret;
  }

  public bool empty() {
    bool ret = nrtPINVOKE.BboxList_empty(swigCPtr);
    return ret;
  }

  public void resize(int size) {
    nrtPINVOKE.BboxList_resize(swigCPtr, size);
  }

  public void clear() {
    nrtPINVOKE.BboxList_clear(swigCPtr);
  }

  public void set_child_result(int bbox_idx, Result result) {
    nrtPINVOKE.BboxList_set_child_result(swigCPtr, bbox_idx, Result.getCPtr(result));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
namespace nrt {

public class Angle : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Angle(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Angle obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Angle obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Angle() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_Angle(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Angle() : this(nrtPINVOKE.new_Angle__SWIG_0(), true) {
  }

  public Angle(int degree) : this(nrtPINVOKE.new_Angle__SWIG_1(degree), true) {
  }

  public Angle(Angle src) : this(nrtPINVOKE.new_Angle__SWIG_2(Angle.getCPtr(src)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public int degree {
    set {
      nrtPINVOKE.Angle_degree_set(swigCPtr, value);
    } 
    get {
      int ret = nrtPINVOKE.Angle_degree_get(swigCPtr);
      return ret;
    } 
  }

  public bool has_child() {
    bool ret = nrtPINVOKE.Angle_has_child(swigCPtr);
    return ret;
  }

  public Result get_child_result() {
    Result ret = new Result(nrtPINVOKE.Angle_get_child_result(swigCPtr), false);
    return ret;
  }

  public void set_child_result(Result result) {
    nrtPINVOKE.Angle_set_child_result(swigCPtr, Result.getCPtr(result));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
namespace nrt {

public class AngleList : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal AngleList(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AngleList obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(AngleList obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~AngleList() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_AngleList(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public AngleList() : this(nrtPINVOKE.new_AngleList__SWIG_0(), true) {
  }

  public AngleList(AngleList src) : this(nrtPINVOKE.new_AngleList__SWIG_1(AngleList.getCPtr(src)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public ulong get_count() {
    ulong ret = nrtPINVOKE.AngleList_get_count(swigCPtr);
    return ret;
  }

  public void append(Angle angle) {
    nrtPINVOKE.AngleList_append(swigCPtr, Angle.getCPtr(angle));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public Angle get(int batch_idx) {
    Angle ret = new Angle(nrtPINVOKE.AngleList_get__SWIG_0(swigCPtr, batch_idx), true);
    return ret;
  }

  public Angle get() {
    Angle ret = new Angle(nrtPINVOKE.AngleList_get__SWIG_1(swigCPtr), true);
    return ret;
  }

  public bool empty() {
    bool ret = nrtPINVOKE.AngleList_empty(swigCPtr);
    return ret;
  }

  public void resize(int size) {
    nrtPINVOKE.AngleList_resize(swigCPtr, size);
  }

  public void clear() {
    nrtPINVOKE.AngleList_clear(swigCPtr);
  }

  public void set_child_result(int batch_idx, Result result) {
    nrtPINVOKE.AngleList_set_child_result(swigCPtr, batch_idx, Result.getCPtr(result));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
namespace nrt {

public class Image : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Image(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Image obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Image obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Image() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_Image(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Image() : this(nrtPINVOKE.new_Image__SWIG_0(), true) {
  }

  public Image(int batch_idx, int child_node_idx) : this(nrtPINVOKE.new_Image__SWIG_1(batch_idx, child_node_idx), true) {
  }

  public Image(Image src) : this(nrtPINVOKE.new_Image__SWIG_2(Image.getCPtr(src)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public int batch_idx {
    set {
      nrtPINVOKE.Image_batch_idx_set(swigCPtr, value);
    } 
    get {
      int ret = nrtPINVOKE.Image_batch_idx_get(swigCPtr);
      return ret;
    } 
  }

  public int child_node_idx {
    set {
      nrtPINVOKE.Image_child_node_idx_set(swigCPtr, value);
    } 
    get {
      int ret = nrtPINVOKE.Image_child_node_idx_get(swigCPtr);
      return ret;
    } 
  }

  public bool has_child() {
    bool ret = nrtPINVOKE.Image_has_child(swigCPtr);
    return ret;
  }

  public void set_child_result(Result result) {
    nrtPINVOKE.Image_set_child_result(swigCPtr, Result.getCPtr(result));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public Result get_child_result() {
    Result ret = new Result(nrtPINVOKE.Image_get_child_result(swigCPtr), false);
    return ret;
  }

}

}
namespace nrt {

public class ImageList : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ImageList(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ImageList obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ImageList obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ImageList() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_ImageList(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ImageList() : this(nrtPINVOKE.new_ImageList__SWIG_0(), true) {
  }

  public ImageList(ImageList src) : this(nrtPINVOKE.new_ImageList__SWIG_1(ImageList.getCPtr(src)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public ulong get_count() {
    ulong ret = nrtPINVOKE.ImageList_get_count(swigCPtr);
    return ret;
  }

  public void append(Image image) {
    nrtPINVOKE.ImageList_append(swigCPtr, Image.getCPtr(image));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public Image get(int idx) {
    Image ret = new Image(nrtPINVOKE.ImageList_get__SWIG_0(swigCPtr, idx), false);
    return ret;
  }

  public Image get() {
    Image ret = new Image(nrtPINVOKE.ImageList_get__SWIG_1(swigCPtr), false);
    return ret;
  }

  public ImageList get_batch(int batch_idx) {
    ImageList ret = new ImageList(nrtPINVOKE.ImageList_get_batch__SWIG_0(swigCPtr, batch_idx), true);
    return ret;
  }

  public ImageList get_batch() {
    ImageList ret = new ImageList(nrtPINVOKE.ImageList_get_batch__SWIG_1(swigCPtr), true);
    return ret;
  }

  public bool empty() {
    bool ret = nrtPINVOKE.ImageList_empty(swigCPtr);
    return ret;
  }

  public void resize(int size) {
    nrtPINVOKE.ImageList_resize(swigCPtr, size);
  }

  public void clear() {
    nrtPINVOKE.ImageList_clear(swigCPtr);
  }

  public void set_child_result(int batch_idx, int child_node_idx, Result result) {
    nrtPINVOKE.ImageList_set_child_result(swigCPtr, batch_idx, child_node_idx, Result.getCPtr(result));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
namespace nrt {

public class TextBbox : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal TextBbox(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TextBbox obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(TextBbox obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~TextBbox() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_TextBbox(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public TextBbox() : this(nrtPINVOKE.new_TextBbox__SWIG_0(), true) {
  }

  public TextBbox(int batch_idx, int class_idx, int order_idx, bool condition_check, char res_char, int batch_result_idx, int x, int y, int w, int h) : this(nrtPINVOKE.new_TextBbox__SWIG_1(batch_idx, class_idx, order_idx, condition_check, res_char, batch_result_idx, x, y, w, h), true) {
  }

  public TextBbox(int batch_idx, int class_idx, int order_idx, bool condition_check, char res_char, int batch_result_idx, Rect rect) : this(nrtPINVOKE.new_TextBbox__SWIG_2(batch_idx, class_idx, order_idx, condition_check, res_char, batch_result_idx, Rect.getCPtr(rect)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public TextBbox(TextBbox src) : this(nrtPINVOKE.new_TextBbox__SWIG_3(TextBbox.getCPtr(src)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public int batch_idx {
    set {
      nrtPINVOKE.TextBbox_batch_idx_set(swigCPtr, value);
    } 
    get {
      int ret = nrtPINVOKE.TextBbox_batch_idx_get(swigCPtr);
      return ret;
    } 
  }

  public int class_idx {
    set {
      nrtPINVOKE.TextBbox_class_idx_set(swigCPtr, value);
    } 
    get {
      int ret = nrtPINVOKE.TextBbox_class_idx_get(swigCPtr);
      return ret;
    } 
  }

  public int order_idx {
    set {
      nrtPINVOKE.TextBbox_order_idx_set(swigCPtr, value);
    } 
    get {
      int ret = nrtPINVOKE.TextBbox_order_idx_get(swigCPtr);
      return ret;
    } 
  }

  public bool condition_check {
    set {
      nrtPINVOKE.TextBbox_condition_check_set(swigCPtr, value);
    } 
    get {
      bool ret = nrtPINVOKE.TextBbox_condition_check_get(swigCPtr);
      return ret;
    } 
  }

  public char res_char {
    set {
      nrtPINVOKE.TextBbox_res_char_set(swigCPtr, value);
    } 
    get {
      char ret = nrtPINVOKE.TextBbox_res_char_get(swigCPtr);
      return ret;
    } 
  }

  public int batch_result_idx {
    set {
      nrtPINVOKE.TextBbox_batch_result_idx_set(swigCPtr, value);
    } 
    get {
      int ret = nrtPINVOKE.TextBbox_batch_result_idx_get(swigCPtr);
      return ret;
    } 
  }

  public Rect rect {
    set {
      nrtPINVOKE.TextBbox_rect_set(swigCPtr, Rect.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = nrtPINVOKE.TextBbox_rect_get(swigCPtr);
      Rect ret = (cPtr == global::System.IntPtr.Zero) ? null : new Rect(cPtr, false);
      return ret;
    } 
  }

}

}
namespace nrt {

public class Text : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Text(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Text obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Text obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Text() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_Text(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Text() : this(nrtPINVOKE.new_Text__SWIG_0(), true) {
  }

  public Text(Text src) : this(nrtPINVOKE.new_Text__SWIG_1(Text.getCPtr(src)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public ulong get_count() {
    ulong ret = nrtPINVOKE.Text_get_count(swigCPtr);
    return ret;
  }

  public TextBbox get_text_bbox(int idx) {
    TextBbox ret = new TextBbox(nrtPINVOKE.Text_get_text_bbox(swigCPtr, idx), false);
    return ret;
  }

  public string get_string() {
    string ret = nrtPINVOKE.Text_get_string(swigCPtr);
    return ret;
  }

  public int batch_idx {
    set {
      nrtPINVOKE.Text_batch_idx_set(swigCPtr, value);
    } 
    get {
      int ret = nrtPINVOKE.Text_batch_idx_get(swigCPtr);
      return ret;
    } 
  }

  public void set_result(SWIGTYPE_p_std__vectorT_nrt__TextBbox_t bboxes) {
    nrtPINVOKE.Text_set_result(swigCPtr, SWIGTYPE_p_std__vectorT_nrt__TextBbox_t.getCPtr(bboxes));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
namespace nrt {

public class TextList : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal TextList(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TextList obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(TextList obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~TextList() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_TextList(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public TextList() : this(nrtPINVOKE.new_TextList__SWIG_0(), true) {
  }

  public TextList(TextList src) : this(nrtPINVOKE.new_TextList__SWIG_1(TextList.getCPtr(src)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public Text get_text(int idx) {
    Text ret = new Text(nrtPINVOKE.TextList_get_text(swigCPtr, idx), false);
    return ret;
  }

  public TextList get_text_from_batch(int batch_idx) {
    TextList ret = new TextList(nrtPINVOKE.TextList_get_text_from_batch(swigCPtr, batch_idx), true);
    return ret;
  }

  public ulong get_count() {
    ulong ret = nrtPINVOKE.TextList_get_count(swigCPtr);
    return ret;
  }

  public void append(Text ocr_text_res) {
    nrtPINVOKE.TextList_append(swigCPtr, Text.getCPtr(ocr_text_res));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool empty() {
    bool ret = nrtPINVOKE.TextList_empty(swigCPtr);
    return ret;
  }

  public void clear() {
    nrtPINVOKE.TextList_clear(swigCPtr);
  }

}

}
namespace nrt {

public class Result : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Result(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Result obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Result obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Result() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_Result(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Result() : this(nrtPINVOKE.new_Result__SWIG_0(), true) {
  }

  public Result(Status init_status) : this(nrtPINVOKE.new_Result__SWIG_1((int)init_status), true) {
  }

  public Result(Result src) : this(nrtPINVOKE.new_Result__SWIG_2(Result.getCPtr(src)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public Status get_status() {
    Status ret = (Status)nrtPINVOKE.Result_get_status(swigCPtr);
    return ret;
  }

  public void clear() {
    nrtPINVOKE.Result_clear(swigCPtr);
  }

  public Result get_batch_result(int batch_idx, int child_node_idx) {
    Result ret = new Result(nrtPINVOKE.Result_get_batch_result(swigCPtr, batch_idx, child_node_idx), true);
    return ret;
  }

  public ModelType model_type {
    set {
      nrtPINVOKE.Result_model_type_set(swigCPtr, (int)value);
    } 
    get {
      ModelType ret = (ModelType)nrtPINVOKE.Result_model_type_get(swigCPtr);
      return ret;
    } 
  }

  public ClassList classes {
    set {
      nrtPINVOKE.Result_classes_set(swigCPtr, ClassList.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = nrtPINVOKE.Result_classes_get(swigCPtr);
      ClassList ret = (cPtr == global::System.IntPtr.Zero) ? null : new ClassList(cPtr, false);
      return ret;
    } 
  }

  public ProbsList probs {
    set {
      nrtPINVOKE.Result_probs_set(swigCPtr, ProbsList.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = nrtPINVOKE.Result_probs_get(swigCPtr);
      ProbsList ret = (cPtr == global::System.IntPtr.Zero) ? null : new ProbsList(cPtr, false);
      return ret;
    } 
  }

  public CAMList cams {
    set {
      nrtPINVOKE.Result_cams_set(swigCPtr, CAMList.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = nrtPINVOKE.Result_cams_get(swigCPtr);
      CAMList ret = (cPtr == global::System.IntPtr.Zero) ? null : new CAMList(cPtr, false);
      return ret;
    } 
  }

  public BlobList blobs {
    set {
      nrtPINVOKE.Result_blobs_set(swigCPtr, BlobList.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = nrtPINVOKE.Result_blobs_get(swigCPtr);
      BlobList ret = (cPtr == global::System.IntPtr.Zero) ? null : new BlobList(cPtr, false);
      return ret;
    } 
  }

  public BboxList bboxes {
    set {
      nrtPINVOKE.Result_bboxes_set(swigCPtr, BboxList.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = nrtPINVOKE.Result_bboxes_get(swigCPtr);
      BboxList ret = (cPtr == global::System.IntPtr.Zero) ? null : new BboxList(cPtr, false);
      return ret;
    } 
  }

  public AngleList angles {
    set {
      nrtPINVOKE.Result_angles_set(swigCPtr, AngleList.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = nrtPINVOKE.Result_angles_get(swigCPtr);
      AngleList ret = (cPtr == global::System.IntPtr.Zero) ? null : new AngleList(cPtr, false);
      return ret;
    } 
  }

  public ImageList images {
    set {
      nrtPINVOKE.Result_images_set(swigCPtr, ImageList.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = nrtPINVOKE.Result_images_get(swigCPtr);
      ImageList ret = (cPtr == global::System.IntPtr.Zero) ? null : new ImageList(cPtr, false);
      return ret;
    } 
  }

  public TextList texts {
    set {
      nrtPINVOKE.Result_texts_set(swigCPtr, TextList.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = nrtPINVOKE.Result_texts_get(swigCPtr);
      TextList ret = (cPtr == global::System.IntPtr.Zero) ? null : new TextList(cPtr, false);
      return ret;
    } 
  }

}

}
namespace nrt {

public enum OIConvertShape {
  ORIGINAL = 0,
  BOX = 1,
  FITTED_BOX = 2
}

}
namespace nrt {

public enum OIConvertType {
  CROP_EQUAL = 0,
  CROP_ACTUAL = 1,
  MASK = 2,
  INVERTED_MASK = 3
}

}
namespace nrt {

public class OIConverter : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal OIConverter(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(OIConverter obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(OIConverter obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~OIConverter() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_OIConverter(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public OIConverter() : this(nrtPINVOKE.new_OIConverter__SWIG_0(), true) {
  }

  public OIConverter(OIConvertShape shape, OIConvertType type, int crop_equal_width, int crop_equal_height, int padding, bool include_unlabeled, bool mask_to_single_image) : this(nrtPINVOKE.new_OIConverter__SWIG_1((int)shape, (int)type, crop_equal_width, crop_equal_height, padding, include_unlabeled, mask_to_single_image), true) {
  }

  public OIConverter(OIConvertShape shape, OIConvertType type, int crop_equal_width, int crop_equal_height, int padding, bool include_unlabeled) : this(nrtPINVOKE.new_OIConverter__SWIG_2((int)shape, (int)type, crop_equal_width, crop_equal_height, padding, include_unlabeled), true) {
  }

  public OIConverter(OIConvertShape shape, OIConvertType type, int crop_equal_width, int crop_equal_height, int padding) : this(nrtPINVOKE.new_OIConverter__SWIG_3((int)shape, (int)type, crop_equal_width, crop_equal_height, padding), true) {
  }

  public OIConverter(OIConverter src) : this(nrtPINVOKE.new_OIConverter__SWIG_4(OIConverter.getCPtr(src)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public Input convert(Input input, Result result, SWIGTYPE_p_std__setT_int_t class_indices, int child_node_idx, SWIGTYPE_p_std__vectorT_int_t input_elem_idxs, SWIGTYPE_p_std__vectorT_std__setT_int_t_t input_class_indices) {
    Input ret = new Input(nrtPINVOKE.OIConverter_convert(swigCPtr, Input.getCPtr(input), Result.getCPtr(result), SWIGTYPE_p_std__setT_int_t.getCPtr(class_indices), child_node_idx, SWIGTYPE_p_std__vectorT_int_t.getCPtr(input_elem_idxs), SWIGTYPE_p_std__vectorT_std__setT_int_t_t.getCPtr(input_class_indices)), true);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public OIConvertShape get_convert_shape() {
    OIConvertShape ret = (OIConvertShape)nrtPINVOKE.OIConverter_get_convert_shape(swigCPtr);
    return ret;
  }

  public OIConvertType get_convert_type() {
    OIConvertType ret = (OIConvertType)nrtPINVOKE.OIConverter_get_convert_type(swigCPtr);
    return ret;
  }

  public int get_crop_equal_width() {
    int ret = nrtPINVOKE.OIConverter_get_crop_equal_width(swigCPtr);
    return ret;
  }

  public int get_crop_equal_height() {
    int ret = nrtPINVOKE.OIConverter_get_crop_equal_height(swigCPtr);
    return ret;
  }

  public int get_padding() {
    int ret = nrtPINVOKE.OIConverter_get_padding(swigCPtr);
    return ret;
  }

  public bool get_include_unlabeled() {
    bool ret = nrtPINVOKE.OIConverter_get_include_unlabeled(swigCPtr);
    return ret;
  }

  public bool get_mask_to_single_image() {
    bool ret = nrtPINVOKE.OIConverter_get_mask_to_single_image(swigCPtr);
    return ret;
  }

  public Status set_convert_shape(OIConvertShape convert_shape) {
    Status ret = (Status)nrtPINVOKE.OIConverter_set_convert_shape(swigCPtr, (int)convert_shape);
    return ret;
  }

  public Status set_convert_type(OIConvertType convert_type) {
    Status ret = (Status)nrtPINVOKE.OIConverter_set_convert_type(swigCPtr, (int)convert_type);
    return ret;
  }

  public Status set_crop_equal_width(int crop_equal_width) {
    Status ret = (Status)nrtPINVOKE.OIConverter_set_crop_equal_width(swigCPtr, crop_equal_width);
    return ret;
  }

  public Status set_crop_equal_height(int crop_equal_height) {
    Status ret = (Status)nrtPINVOKE.OIConverter_set_crop_equal_height(swigCPtr, crop_equal_height);
    return ret;
  }

  public Status set_padding(int padding) {
    Status ret = (Status)nrtPINVOKE.OIConverter_set_padding(swigCPtr, padding);
    return ret;
  }

  public Status get_status() {
    Status ret = (Status)nrtPINVOKE.OIConverter_get_status(swigCPtr);
    return ret;
  }

  public Status destroy() {
    Status ret = (Status)nrtPINVOKE.OIConverter_destroy(swigCPtr);
    return ret;
  }

}

}
namespace nrt {

public class FlowchartNode : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FlowchartNode(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FlowchartNode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(FlowchartNode obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~FlowchartNode() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_FlowchartNode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public FlowchartNode() : this(nrtPINVOKE.new_FlowchartNode__SWIG_0(), true) {
  }

  public FlowchartNode(Status init_status) : this(nrtPINVOKE.new_FlowchartNode__SWIG_1((int)init_status), true) {
  }

  public FlowchartNode(Predictor predictor) : this(nrtPINVOKE.new_FlowchartNode__SWIG_2(Predictor.getCPtr(predictor)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public FlowchartNode(FlowchartNode src) : this(nrtPINVOKE.new_FlowchartNode__SWIG_3(FlowchartNode.getCPtr(src)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public Predictor get_predictor() {
    Predictor ret = new Predictor(nrtPINVOKE.FlowchartNode_get_predictor(swigCPtr), false);
    return ret;
  }

  public OIConverter get_oiconverter() {
    OIConverter ret = new OIConverter(nrtPINVOKE.FlowchartNode_get_oiconverter(swigCPtr), false);
    return ret;
  }

  public bool has_child(int class_idx) {
    bool ret = nrtPINVOKE.FlowchartNode_has_child(swigCPtr, class_idx);
    return ret;
  }

  public FlowchartNode get_child(int class_idx) {
    FlowchartNode ret = new FlowchartNode(nrtPINVOKE.FlowchartNode_get_child(swigCPtr, class_idx), false);
    return ret;
  }

  public FlowchartNodeVector get_children() {
    FlowchartNodeVector ret = new FlowchartNodeVector(nrtPINVOKE.FlowchartNode_get_children(swigCPtr), true);
    return ret;
  }

  public Input convert(Input input, Result result, int child_node_idx, SWIGTYPE_p_std__vectorT_int_t input_elem_idxs, SWIGTYPE_p_std__vectorT_std__setT_int_t_t input_class_indices) {
    Input ret = new Input(nrtPINVOKE.FlowchartNode_convert(swigCPtr, Input.getCPtr(input), Result.getCPtr(result), child_node_idx, SWIGTYPE_p_std__vectorT_int_t.getCPtr(input_elem_idxs), SWIGTYPE_p_std__vectorT_std__setT_int_t_t.getCPtr(input_class_indices)), true);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Result predict(Input input, int child_node_idx, Result pre_result, SWIGTYPE_p_std__vectorT_int_t pre_input_elem_idx) {
    Result ret = new Result(nrtPINVOKE.FlowchartNode_predict(swigCPtr, Input.getCPtr(input), child_node_idx, Result.getCPtr(pre_result), SWIGTYPE_p_std__vectorT_int_t.getCPtr(pre_input_elem_idx)), true);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Status get_status() {
    Status ret = (Status)nrtPINVOKE.FlowchartNode_get_status(swigCPtr);
    return ret;
  }

  public Status destroy() {
    Status ret = (Status)nrtPINVOKE.FlowchartNode_destroy(swigCPtr);
    return ret;
  }

}

}
namespace nrt {

public class FlowchartEngine : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FlowchartEngine(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FlowchartEngine obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(FlowchartEngine obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~FlowchartEngine() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_FlowchartEngine(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public FlowchartEngine() : this(nrtPINVOKE.new_FlowchartEngine__SWIG_0(), true) {
  }

  public FlowchartEngine(FlowchartEngine src) : this(nrtPINVOKE.new_FlowchartEngine__SWIG_1(FlowchartEngine.getCPtr(src)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
namespace nrt {

public class Flowchart : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Flowchart(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Flowchart obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Flowchart obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Flowchart() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_Flowchart(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Flowchart() : this(nrtPINVOKE.new_Flowchart__SWIG_0(), true) {
  }

  public Flowchart(string flowchart_path, int modelio_flag, int device_idx, int batch_size, bool fp16_flag, bool threshold_flag, DevType dev_type) : this(nrtPINVOKE.new_Flowchart__SWIG_1(flowchart_path, modelio_flag, device_idx, batch_size, fp16_flag, threshold_flag, (int)dev_type), true) {
  }

  public Flowchart(string flowchart_path, int modelio_flag, int device_idx, int batch_size, bool fp16_flag, bool threshold_flag) : this(nrtPINVOKE.new_Flowchart__SWIG_2(flowchart_path, modelio_flag, device_idx, batch_size, fp16_flag, threshold_flag), true) {
  }

  public Flowchart(string flowchart_path, int modelio_flag, int device_idx, int batch_size, bool fp16_flag) : this(nrtPINVOKE.new_Flowchart__SWIG_3(flowchart_path, modelio_flag, device_idx, batch_size, fp16_flag), true) {
  }

  public Flowchart(string flowchart_path, int modelio_flag, int device_idx, int batch_size) : this(nrtPINVOKE.new_Flowchart__SWIG_4(flowchart_path, modelio_flag, device_idx, batch_size), true) {
  }

  public Flowchart(string flowchart_path, int modelio_flag, int device_idx) : this(nrtPINVOKE.new_Flowchart__SWIG_5(flowchart_path, modelio_flag, device_idx), true) {
  }

  public Flowchart(string flowchart_path, int modelio_flag) : this(nrtPINVOKE.new_Flowchart__SWIG_6(flowchart_path, modelio_flag), true) {
  }

  public Flowchart(string flowchart_path) : this(nrtPINVOKE.new_Flowchart__SWIG_7(flowchart_path), true) {
  }

  public Flowchart(string flowchart_path, NDBuffer batch_sizes, int modelio_flag, int device_idx, bool fp16_flag, bool threshold_flag) : this(nrtPINVOKE.new_Flowchart__SWIG_8(flowchart_path, NDBuffer.getCPtr(batch_sizes), modelio_flag, device_idx, fp16_flag, threshold_flag), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public Flowchart(string flowchart_path, NDBuffer batch_sizes, int modelio_flag, int device_idx, bool fp16_flag) : this(nrtPINVOKE.new_Flowchart__SWIG_9(flowchart_path, NDBuffer.getCPtr(batch_sizes), modelio_flag, device_idx, fp16_flag), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public Flowchart(string flowchart_path, NDBuffer batch_sizes, int modelio_flag, int device_idx) : this(nrtPINVOKE.new_Flowchart__SWIG_10(flowchart_path, NDBuffer.getCPtr(batch_sizes), modelio_flag, device_idx), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public Flowchart(string flowchart_path, NDBuffer batch_sizes, int modelio_flag) : this(nrtPINVOKE.new_Flowchart__SWIG_11(flowchart_path, NDBuffer.getCPtr(batch_sizes), modelio_flag), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public Flowchart(string flowchart_path, NDBuffer batch_sizes) : this(nrtPINVOKE.new_Flowchart__SWIG_12(flowchart_path, NDBuffer.getCPtr(batch_sizes)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public Flowchart(int device_idx, string flowchart_engine_path, bool threshold_flag) : this(nrtPINVOKE.new_Flowchart__SWIG_13(device_idx, flowchart_engine_path, threshold_flag), true) {
  }

  public Flowchart(int device_idx, string flowchart_engine_path) : this(nrtPINVOKE.new_Flowchart__SWIG_14(device_idx, flowchart_engine_path), true) {
  }

  public Flowchart(int device_idx, FlowchartEngine flowchart_engine, bool threshold_flag) : this(nrtPINVOKE.new_Flowchart__SWIG_15(device_idx, FlowchartEngine.getCPtr(flowchart_engine), threshold_flag), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public Flowchart(int device_idx, FlowchartEngine flowchart_engine) : this(nrtPINVOKE.new_Flowchart__SWIG_16(device_idx, FlowchartEngine.getCPtr(flowchart_engine)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public Flowchart(Flowchart src) : this(nrtPINVOKE.new_Flowchart__SWIG_17(Flowchart.getCPtr(src)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clear() {
    nrtPINVOKE.Flowchart_clear(swigCPtr);
  }

  public FlowchartNode create_root(Predictor root_predictor) {
    FlowchartNode ret = new FlowchartNode(nrtPINVOKE.Flowchart_create_root(swigCPtr, Predictor.getCPtr(root_predictor)), false);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FlowchartNode create_node(FlowchartNode parent_node, SWIGTYPE_p_std__setT_int_t parent_class_indices, Predictor predictor, OIConvertShape convert_shape, OIConvertType convert_type, int convert_crop_equal_width, int convert_crop_equal_height, int convert_padding, bool include_unlabeled, bool mask_to_single_image) {
    FlowchartNode ret = new FlowchartNode(nrtPINVOKE.Flowchart_create_node__SWIG_0(swigCPtr, FlowchartNode.getCPtr(parent_node), SWIGTYPE_p_std__setT_int_t.getCPtr(parent_class_indices), Predictor.getCPtr(predictor), (int)convert_shape, (int)convert_type, convert_crop_equal_width, convert_crop_equal_height, convert_padding, include_unlabeled, mask_to_single_image), false);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FlowchartNode create_node(FlowchartNode parent_node, SWIGTYPE_p_std__setT_int_t parent_class_indices, Predictor predictor, OIConvertShape convert_shape, OIConvertType convert_type, int convert_crop_equal_width, int convert_crop_equal_height, int convert_padding, bool include_unlabeled) {
    FlowchartNode ret = new FlowchartNode(nrtPINVOKE.Flowchart_create_node__SWIG_1(swigCPtr, FlowchartNode.getCPtr(parent_node), SWIGTYPE_p_std__setT_int_t.getCPtr(parent_class_indices), Predictor.getCPtr(predictor), (int)convert_shape, (int)convert_type, convert_crop_equal_width, convert_crop_equal_height, convert_padding, include_unlabeled), false);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FlowchartNode create_node(FlowchartNode parent_node, SWIGTYPE_p_std__setT_int_t parent_class_indices, Predictor predictor, OIConvertShape convert_shape, OIConvertType convert_type, int convert_crop_equal_width, int convert_crop_equal_height, int convert_padding) {
    FlowchartNode ret = new FlowchartNode(nrtPINVOKE.Flowchart_create_node__SWIG_2(swigCPtr, FlowchartNode.getCPtr(parent_node), SWIGTYPE_p_std__setT_int_t.getCPtr(parent_class_indices), Predictor.getCPtr(predictor), (int)convert_shape, (int)convert_type, convert_crop_equal_width, convert_crop_equal_height, convert_padding), false);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FlowchartNode create_node(FlowchartNode parent_node, SWIGTYPE_p_std__setT_int_t parent_class_indices, Predictor predictor, OIConvertShape convert_shape, OIConvertType convert_type, int convert_crop_equal_width, int convert_crop_equal_height) {
    FlowchartNode ret = new FlowchartNode(nrtPINVOKE.Flowchart_create_node__SWIG_3(swigCPtr, FlowchartNode.getCPtr(parent_node), SWIGTYPE_p_std__setT_int_t.getCPtr(parent_class_indices), Predictor.getCPtr(predictor), (int)convert_shape, (int)convert_type, convert_crop_equal_width, convert_crop_equal_height), false);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FlowchartNode create_node(FlowchartNode parent_node, SWIGTYPE_p_std__setT_int_t parent_class_indices, Predictor predictor, OIConvertShape convert_shape, OIConvertType convert_type, int convert_crop_equal_width) {
    FlowchartNode ret = new FlowchartNode(nrtPINVOKE.Flowchart_create_node__SWIG_4(swigCPtr, FlowchartNode.getCPtr(parent_node), SWIGTYPE_p_std__setT_int_t.getCPtr(parent_class_indices), Predictor.getCPtr(predictor), (int)convert_shape, (int)convert_type, convert_crop_equal_width), false);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FlowchartNode create_node(FlowchartNode parent_node, SWIGTYPE_p_std__setT_int_t parent_class_indices, Predictor predictor, OIConvertShape convert_shape, OIConvertType convert_type) {
    FlowchartNode ret = new FlowchartNode(nrtPINVOKE.Flowchart_create_node__SWIG_5(swigCPtr, FlowchartNode.getCPtr(parent_node), SWIGTYPE_p_std__setT_int_t.getCPtr(parent_class_indices), Predictor.getCPtr(predictor), (int)convert_shape, (int)convert_type), false);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FlowchartNode create_node(FlowchartNode parent_node, SWIGTYPE_p_std__setT_int_t parent_class_indices, Predictor predictor, OIConvertShape convert_shape) {
    FlowchartNode ret = new FlowchartNode(nrtPINVOKE.Flowchart_create_node__SWIG_6(swigCPtr, FlowchartNode.getCPtr(parent_node), SWIGTYPE_p_std__setT_int_t.getCPtr(parent_class_indices), Predictor.getCPtr(predictor), (int)convert_shape), false);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FlowchartNode create_node(FlowchartNode parent_node, SWIGTYPE_p_std__setT_int_t parent_class_indices, Predictor predictor) {
    FlowchartNode ret = new FlowchartNode(nrtPINVOKE.Flowchart_create_node__SWIG_7(swigCPtr, FlowchartNode.getCPtr(parent_node), SWIGTYPE_p_std__setT_int_t.getCPtr(parent_class_indices), Predictor.getCPtr(predictor)), false);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FlowchartNode get_node(SWIGTYPE_p_std__vectorT_std__setT_int_t_t class_indices) {
    FlowchartNode ret = new FlowchartNode(nrtPINVOKE.Flowchart_get_node__SWIG_0(swigCPtr, SWIGTYPE_p_std__vectorT_std__setT_int_t_t.getCPtr(class_indices)), false);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FlowchartNode get_node() {
    FlowchartNode ret = new FlowchartNode(nrtPINVOKE.Flowchart_get_node__SWIG_1(swigCPtr), false);
    return ret;
  }

  public FlowchartNode get_node(int depth) {
    FlowchartNode ret = new FlowchartNode(nrtPINVOKE.Flowchart_get_node__SWIG_2(swigCPtr, depth), false);
    return ret;
  }

  public Status delete_node(SWIGTYPE_p_std__vectorT_int_t class_indices) {
    Status ret = (Status)nrtPINVOKE.Flowchart_delete_node__SWIG_0(swigCPtr, SWIGTYPE_p_std__vectorT_int_t.getCPtr(class_indices));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Status delete_node(int depth) {
    Status ret = (Status)nrtPINVOKE.Flowchart_delete_node__SWIG_1(swigCPtr, depth);
    return ret;
  }

  public void print_flowchart() {
    nrtPINVOKE.Flowchart_print_flowchart(swigCPtr);
  }

  public int get_root_batch_size() {
    int ret = nrtPINVOKE.Flowchart_get_root_batch_size(swigCPtr);
    return ret;
  }

  public Status save_flowchart_engine(string flowchart_engine_path) {
    Status ret = (Status)nrtPINVOKE.Flowchart_save_flowchart_engine__SWIG_0(swigCPtr, flowchart_engine_path);
    return ret;
  }

  public Status save_flowchart_engine(FlowchartEngine flowchart_engine) {
    Status ret = (Status)nrtPINVOKE.Flowchart_save_flowchart_engine__SWIG_1(swigCPtr, FlowchartEngine.getCPtr(flowchart_engine));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Result predict(Input input) {
    Result ret = new Result(nrtPINVOKE.Flowchart_predict(swigCPtr, Input.getCPtr(input)), true);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Status get_status() {
    Status ret = (Status)nrtPINVOKE.Flowchart_get_status(swigCPtr);
    return ret;
  }

}

}
namespace nrt {

public enum PhotometricStereoFlag {
  ALBEDO = 1 << 0,
  NORMAL = 1 << 1,
  GRADIENT_X = 1 << 2,
  GRADIENT_Y = 1 << 3,
  GRADIENT_Z = 1 << 4,
  MEAN_CURVATURE = 1 << 5,
  ABSOLUTE_CURVATURE = 1 << 6,
  DEPTH = 1 << 7
}

}
namespace nrt {

public class PhotometricStereoOutputParam : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PhotometricStereoOutputParam(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PhotometricStereoOutputParam obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(PhotometricStereoOutputParam obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~PhotometricStereoOutputParam() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_PhotometricStereoOutputParam(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public bool need_create {
    set {
      nrtPINVOKE.PhotometricStereoOutputParam_need_create_set(swigCPtr, value);
    } 
    get {
      bool ret = nrtPINVOKE.PhotometricStereoOutputParam_need_create_get(swigCPtr);
      return ret;
    } 
  }

  public float contrast {
    set {
      nrtPINVOKE.PhotometricStereoOutputParam_contrast_set(swigCPtr, value);
    } 
    get {
      float ret = nrtPINVOKE.PhotometricStereoOutputParam_contrast_get(swigCPtr);
      return ret;
    } 
  }

  public float brightness {
    set {
      nrtPINVOKE.PhotometricStereoOutputParam_brightness_set(swigCPtr, value);
    } 
    get {
      float ret = nrtPINVOKE.PhotometricStereoOutputParam_brightness_get(swigCPtr);
      return ret;
    } 
  }

  public PhotometricStereoOutputParam() : this(nrtPINVOKE.new_PhotometricStereoOutputParam(), true) {
  }

}

}
namespace nrt {

public class PhotometricStereoHeightMapParam : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PhotometricStereoHeightMapParam(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PhotometricStereoHeightMapParam obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(PhotometricStereoHeightMapParam obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~PhotometricStereoHeightMapParam() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_PhotometricStereoHeightMapParam(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public bool need_create {
    set {
      nrtPINVOKE.PhotometricStereoHeightMapParam_need_create_set(swigCPtr, value);
    } 
    get {
      bool ret = nrtPINVOKE.PhotometricStereoHeightMapParam_need_create_get(swigCPtr);
      return ret;
    } 
  }

  public int scaling_x {
    set {
      nrtPINVOKE.PhotometricStereoHeightMapParam_scaling_x_set(swigCPtr, value);
    } 
    get {
      int ret = nrtPINVOKE.PhotometricStereoHeightMapParam_scaling_x_get(swigCPtr);
      return ret;
    } 
  }

  public int scaling_y {
    set {
      nrtPINVOKE.PhotometricStereoHeightMapParam_scaling_y_set(swigCPtr, value);
    } 
    get {
      int ret = nrtPINVOKE.PhotometricStereoHeightMapParam_scaling_y_get(swigCPtr);
      return ret;
    } 
  }

  public int scaling_z {
    set {
      nrtPINVOKE.PhotometricStereoHeightMapParam_scaling_z_set(swigCPtr, value);
    } 
    get {
      int ret = nrtPINVOKE.PhotometricStereoHeightMapParam_scaling_z_get(swigCPtr);
      return ret;
    } 
  }

  public float contrast {
    set {
      nrtPINVOKE.PhotometricStereoHeightMapParam_contrast_set(swigCPtr, value);
    } 
    get {
      float ret = nrtPINVOKE.PhotometricStereoHeightMapParam_contrast_get(swigCPtr);
      return ret;
    } 
  }

  public float brightness {
    set {
      nrtPINVOKE.PhotometricStereoHeightMapParam_brightness_set(swigCPtr, value);
    } 
    get {
      float ret = nrtPINVOKE.PhotometricStereoHeightMapParam_brightness_get(swigCPtr);
      return ret;
    } 
  }

  public PhotometricStereoHeightMapParam() : this(nrtPINVOKE.new_PhotometricStereoHeightMapParam(), true) {
  }

}

}
namespace nrt {

public class PhotometricStereoConfig : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PhotometricStereoConfig(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PhotometricStereoConfig obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(PhotometricStereoConfig obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~PhotometricStereoConfig() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_PhotometricStereoConfig(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public PhotometricStereoOutputParam albedo {
    set {
      nrtPINVOKE.PhotometricStereoConfig_albedo_set(swigCPtr, PhotometricStereoOutputParam.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = nrtPINVOKE.PhotometricStereoConfig_albedo_get(swigCPtr);
      PhotometricStereoOutputParam ret = (cPtr == global::System.IntPtr.Zero) ? null : new PhotometricStereoOutputParam(cPtr, false);
      return ret;
    } 
  }

  public PhotometricStereoOutputParam normal {
    set {
      nrtPINVOKE.PhotometricStereoConfig_normal_set(swigCPtr, PhotometricStereoOutputParam.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = nrtPINVOKE.PhotometricStereoConfig_normal_get(swigCPtr);
      PhotometricStereoOutputParam ret = (cPtr == global::System.IntPtr.Zero) ? null : new PhotometricStereoOutputParam(cPtr, false);
      return ret;
    } 
  }

  public PhotometricStereoOutputParam gradient_x {
    set {
      nrtPINVOKE.PhotometricStereoConfig_gradient_x_set(swigCPtr, PhotometricStereoOutputParam.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = nrtPINVOKE.PhotometricStereoConfig_gradient_x_get(swigCPtr);
      PhotometricStereoOutputParam ret = (cPtr == global::System.IntPtr.Zero) ? null : new PhotometricStereoOutputParam(cPtr, false);
      return ret;
    } 
  }

  public PhotometricStereoOutputParam gradient_y {
    set {
      nrtPINVOKE.PhotometricStereoConfig_gradient_y_set(swigCPtr, PhotometricStereoOutputParam.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = nrtPINVOKE.PhotometricStereoConfig_gradient_y_get(swigCPtr);
      PhotometricStereoOutputParam ret = (cPtr == global::System.IntPtr.Zero) ? null : new PhotometricStereoOutputParam(cPtr, false);
      return ret;
    } 
  }

  public PhotometricStereoOutputParam gradient_z {
    set {
      nrtPINVOKE.PhotometricStereoConfig_gradient_z_set(swigCPtr, PhotometricStereoOutputParam.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = nrtPINVOKE.PhotometricStereoConfig_gradient_z_get(swigCPtr);
      PhotometricStereoOutputParam ret = (cPtr == global::System.IntPtr.Zero) ? null : new PhotometricStereoOutputParam(cPtr, false);
      return ret;
    } 
  }

  public PhotometricStereoOutputParam mean_curvature {
    set {
      nrtPINVOKE.PhotometricStereoConfig_mean_curvature_set(swigCPtr, PhotometricStereoOutputParam.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = nrtPINVOKE.PhotometricStereoConfig_mean_curvature_get(swigCPtr);
      PhotometricStereoOutputParam ret = (cPtr == global::System.IntPtr.Zero) ? null : new PhotometricStereoOutputParam(cPtr, false);
      return ret;
    } 
  }

  public PhotometricStereoOutputParam absolute_curvature {
    set {
      nrtPINVOKE.PhotometricStereoConfig_absolute_curvature_set(swigCPtr, PhotometricStereoOutputParam.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = nrtPINVOKE.PhotometricStereoConfig_absolute_curvature_get(swigCPtr);
      PhotometricStereoOutputParam ret = (cPtr == global::System.IntPtr.Zero) ? null : new PhotometricStereoOutputParam(cPtr, false);
      return ret;
    } 
  }

  public PhotometricStereoHeightMapParam depth {
    set {
      nrtPINVOKE.PhotometricStereoConfig_depth_set(swigCPtr, PhotometricStereoHeightMapParam.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = nrtPINVOKE.PhotometricStereoConfig_depth_get(swigCPtr);
      PhotometricStereoHeightMapParam ret = (cPtr == global::System.IntPtr.Zero) ? null : new PhotometricStereoHeightMapParam(cPtr, false);
      return ret;
    } 
  }

  public PhotometricStereoConfig() : this(nrtPINVOKE.new_PhotometricStereoConfig(), true) {
  }

}

}
namespace nrt {

public class PhotometricStereoResult : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PhotometricStereoResult(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PhotometricStereoResult obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(PhotometricStereoResult obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~PhotometricStereoResult() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_PhotometricStereoResult(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public NDBuffer albedo {
    set {
      nrtPINVOKE.PhotometricStereoResult_albedo_set(swigCPtr, NDBuffer.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = nrtPINVOKE.PhotometricStereoResult_albedo_get(swigCPtr);
      NDBuffer ret = (cPtr == global::System.IntPtr.Zero) ? null : new NDBuffer(cPtr, false);
      return ret;
    } 
  }

  public NDBuffer normal {
    set {
      nrtPINVOKE.PhotometricStereoResult_normal_set(swigCPtr, NDBuffer.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = nrtPINVOKE.PhotometricStereoResult_normal_get(swigCPtr);
      NDBuffer ret = (cPtr == global::System.IntPtr.Zero) ? null : new NDBuffer(cPtr, false);
      return ret;
    } 
  }

  public NDBuffer gradient_x {
    set {
      nrtPINVOKE.PhotometricStereoResult_gradient_x_set(swigCPtr, NDBuffer.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = nrtPINVOKE.PhotometricStereoResult_gradient_x_get(swigCPtr);
      NDBuffer ret = (cPtr == global::System.IntPtr.Zero) ? null : new NDBuffer(cPtr, false);
      return ret;
    } 
  }

  public NDBuffer gradient_y {
    set {
      nrtPINVOKE.PhotometricStereoResult_gradient_y_set(swigCPtr, NDBuffer.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = nrtPINVOKE.PhotometricStereoResult_gradient_y_get(swigCPtr);
      NDBuffer ret = (cPtr == global::System.IntPtr.Zero) ? null : new NDBuffer(cPtr, false);
      return ret;
    } 
  }

  public NDBuffer gradient_z {
    set {
      nrtPINVOKE.PhotometricStereoResult_gradient_z_set(swigCPtr, NDBuffer.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = nrtPINVOKE.PhotometricStereoResult_gradient_z_get(swigCPtr);
      NDBuffer ret = (cPtr == global::System.IntPtr.Zero) ? null : new NDBuffer(cPtr, false);
      return ret;
    } 
  }

  public NDBuffer mean_curvature {
    set {
      nrtPINVOKE.PhotometricStereoResult_mean_curvature_set(swigCPtr, NDBuffer.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = nrtPINVOKE.PhotometricStereoResult_mean_curvature_get(swigCPtr);
      NDBuffer ret = (cPtr == global::System.IntPtr.Zero) ? null : new NDBuffer(cPtr, false);
      return ret;
    } 
  }

  public NDBuffer absolute_curvature {
    set {
      nrtPINVOKE.PhotometricStereoResult_absolute_curvature_set(swigCPtr, NDBuffer.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = nrtPINVOKE.PhotometricStereoResult_absolute_curvature_get(swigCPtr);
      NDBuffer ret = (cPtr == global::System.IntPtr.Zero) ? null : new NDBuffer(cPtr, false);
      return ret;
    } 
  }

  public NDBuffer depth {
    set {
      nrtPINVOKE.PhotometricStereoResult_depth_set(swigCPtr, NDBuffer.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = nrtPINVOKE.PhotometricStereoResult_depth_get(swigCPtr);
      NDBuffer ret = (cPtr == global::System.IntPtr.Zero) ? null : new NDBuffer(cPtr, false);
      return ret;
    } 
  }

  public PhotometricStereoResult() : this(nrtPINVOKE.new_PhotometricStereoResult(), true) {
  }

}

}
namespace nrt {

public class FlowchartNodeVector : global::System.IDisposable, global::System.Collections.IEnumerable, global::System.Collections.Generic.IEnumerable<FlowchartNode>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FlowchartNodeVector(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FlowchartNodeVector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(FlowchartNodeVector obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~FlowchartNodeVector() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_FlowchartNodeVector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public FlowchartNodeVector(global::System.Collections.IEnumerable c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (FlowchartNode element in c) {
      this.Add(element);
    }
  }

  public FlowchartNodeVector(global::System.Collections.Generic.IEnumerable<FlowchartNode> c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (FlowchartNode element in c) {
      this.Add(element);
    }
  }

  public bool IsFixedSize {
    get {
      return false;
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public FlowchartNode this[int index]  {
    get {
      return getitem(index);
    }
    set {
      setitem(index, value);
    }
  }

  public int Capacity {
    get {
      return (int)capacity();
    }
    set {
      if (value < 0 || (uint)value < size())
        throw new global::System.ArgumentOutOfRangeException("Capacity");
      reserve((uint)value);
    }
  }

  public bool IsEmpty {
    get {
      return empty();
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsSynchronized {
    get {
      return false;
    }
  }

  public void CopyTo(FlowchartNode[] array)
  {
    CopyTo(0, array, 0, this.Count);
  }

  public void CopyTo(FlowchartNode[] array, int arrayIndex)
  {
    CopyTo(0, array, arrayIndex, this.Count);
  }

  public void CopyTo(int index, FlowchartNode[] array, int arrayIndex, int count)
  {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (index < 0)
      throw new global::System.ArgumentOutOfRangeException("index", "Value is less than zero");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (count < 0)
      throw new global::System.ArgumentOutOfRangeException("count", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (index+count > this.Count || arrayIndex+count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");
    for (int i=0; i<count; i++)
      array.SetValue(getitemcopy(index+i), arrayIndex+i);
  }

  public FlowchartNode[] ToArray() {
    FlowchartNode[] array = new FlowchartNode[this.Count];
    this.CopyTo(array);
    return array;
  }

  global::System.Collections.Generic.IEnumerator<FlowchartNode> global::System.Collections.Generic.IEnumerable<FlowchartNode>.GetEnumerator() {
    return new FlowchartNodeVectorEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new FlowchartNodeVectorEnumerator(this);
  }

  public FlowchartNodeVectorEnumerator GetEnumerator() {
    return new FlowchartNodeVectorEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class FlowchartNodeVectorEnumerator : global::System.Collections.IEnumerator
    , global::System.Collections.Generic.IEnumerator<FlowchartNode>
  {
    private FlowchartNodeVector collectionRef;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public FlowchartNodeVectorEnumerator(FlowchartNodeVector collection) {
      collectionRef = collection;
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public FlowchartNode Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (FlowchartNode)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        currentObject = collectionRef[currentIndex];
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
        currentIndex = -1;
        currentObject = null;
    }
  }

  public FlowchartNodeVector() : this(nrtPINVOKE.new_FlowchartNodeVector__SWIG_0(), true) {
  }

  public FlowchartNodeVector(FlowchartNodeVector other) : this(nrtPINVOKE.new_FlowchartNodeVector__SWIG_1(FlowchartNodeVector.getCPtr(other)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Clear() {
    nrtPINVOKE.FlowchartNodeVector_Clear(swigCPtr);
  }

  public void Add(FlowchartNode x) {
    nrtPINVOKE.FlowchartNodeVector_Add(swigCPtr, FlowchartNode.getCPtr(x));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  private uint size() {
    uint ret = nrtPINVOKE.FlowchartNodeVector_size(swigCPtr);
    return ret;
  }

  private bool empty() {
    bool ret = nrtPINVOKE.FlowchartNodeVector_empty(swigCPtr);
    return ret;
  }

  private uint capacity() {
    uint ret = nrtPINVOKE.FlowchartNodeVector_capacity(swigCPtr);
    return ret;
  }

  private void reserve(uint n) {
    nrtPINVOKE.FlowchartNodeVector_reserve(swigCPtr, n);
  }

  public FlowchartNodeVector(int capacity) : this(nrtPINVOKE.new_FlowchartNodeVector__SWIG_2(capacity), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  private FlowchartNode getitemcopy(int index) {
    FlowchartNode ret = new FlowchartNode(nrtPINVOKE.FlowchartNodeVector_getitemcopy(swigCPtr, index), true);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private FlowchartNode getitem(int index) {
    FlowchartNode ret = new FlowchartNode(nrtPINVOKE.FlowchartNodeVector_getitem(swigCPtr, index), false);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(int index, FlowchartNode val) {
    nrtPINVOKE.FlowchartNodeVector_setitem(swigCPtr, index, FlowchartNode.getCPtr(val));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddRange(FlowchartNodeVector values) {
    nrtPINVOKE.FlowchartNodeVector_AddRange(swigCPtr, FlowchartNodeVector.getCPtr(values));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public FlowchartNodeVector GetRange(int index, int count) {
    global::System.IntPtr cPtr = nrtPINVOKE.FlowchartNodeVector_GetRange(swigCPtr, index, count);
    FlowchartNodeVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new FlowchartNodeVector(cPtr, true);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Insert(int index, FlowchartNode x) {
    nrtPINVOKE.FlowchartNodeVector_Insert(swigCPtr, index, FlowchartNode.getCPtr(x));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public void InsertRange(int index, FlowchartNodeVector values) {
    nrtPINVOKE.FlowchartNodeVector_InsertRange(swigCPtr, index, FlowchartNodeVector.getCPtr(values));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAt(int index) {
    nrtPINVOKE.FlowchartNodeVector_RemoveAt(swigCPtr, index);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveRange(int index, int count) {
    nrtPINVOKE.FlowchartNodeVector_RemoveRange(swigCPtr, index, count);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public static FlowchartNodeVector Repeat(FlowchartNode value, int count) {
    global::System.IntPtr cPtr = nrtPINVOKE.FlowchartNodeVector_Repeat(FlowchartNode.getCPtr(value), count);
    FlowchartNodeVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new FlowchartNodeVector(cPtr, true);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Reverse() {
    nrtPINVOKE.FlowchartNodeVector_Reverse__SWIG_0(swigCPtr);
  }

  public void Reverse(int index, int count) {
    nrtPINVOKE.FlowchartNodeVector_Reverse__SWIG_1(swigCPtr, index, count);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRange(int index, FlowchartNodeVector values) {
    nrtPINVOKE.FlowchartNodeVector_SetRange(swigCPtr, index, FlowchartNodeVector.getCPtr(values));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
namespace nrt {

public class NDBufferVector : global::System.IDisposable, global::System.Collections.IEnumerable, global::System.Collections.Generic.IEnumerable<NDBuffer>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal NDBufferVector(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(NDBufferVector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(NDBufferVector obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~NDBufferVector() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nrtPINVOKE.delete_NDBufferVector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public NDBufferVector(global::System.Collections.IEnumerable c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (NDBuffer element in c) {
      this.Add(element);
    }
  }

  public NDBufferVector(global::System.Collections.Generic.IEnumerable<NDBuffer> c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (NDBuffer element in c) {
      this.Add(element);
    }
  }

  public bool IsFixedSize {
    get {
      return false;
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public NDBuffer this[int index]  {
    get {
      return getitem(index);
    }
    set {
      setitem(index, value);
    }
  }

  public int Capacity {
    get {
      return (int)capacity();
    }
    set {
      if (value < 0 || (uint)value < size())
        throw new global::System.ArgumentOutOfRangeException("Capacity");
      reserve((uint)value);
    }
  }

  public bool IsEmpty {
    get {
      return empty();
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsSynchronized {
    get {
      return false;
    }
  }

  public void CopyTo(NDBuffer[] array)
  {
    CopyTo(0, array, 0, this.Count);
  }

  public void CopyTo(NDBuffer[] array, int arrayIndex)
  {
    CopyTo(0, array, arrayIndex, this.Count);
  }

  public void CopyTo(int index, NDBuffer[] array, int arrayIndex, int count)
  {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (index < 0)
      throw new global::System.ArgumentOutOfRangeException("index", "Value is less than zero");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (count < 0)
      throw new global::System.ArgumentOutOfRangeException("count", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (index+count > this.Count || arrayIndex+count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");
    for (int i=0; i<count; i++)
      array.SetValue(getitemcopy(index+i), arrayIndex+i);
  }

  public NDBuffer[] ToArray() {
    NDBuffer[] array = new NDBuffer[this.Count];
    this.CopyTo(array);
    return array;
  }

  global::System.Collections.Generic.IEnumerator<NDBuffer> global::System.Collections.Generic.IEnumerable<NDBuffer>.GetEnumerator() {
    return new NDBufferVectorEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new NDBufferVectorEnumerator(this);
  }

  public NDBufferVectorEnumerator GetEnumerator() {
    return new NDBufferVectorEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class NDBufferVectorEnumerator : global::System.Collections.IEnumerator
    , global::System.Collections.Generic.IEnumerator<NDBuffer>
  {
    private NDBufferVector collectionRef;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public NDBufferVectorEnumerator(NDBufferVector collection) {
      collectionRef = collection;
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public NDBuffer Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (NDBuffer)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        currentObject = collectionRef[currentIndex];
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
        currentIndex = -1;
        currentObject = null;
    }
  }

  public NDBufferVector() : this(nrtPINVOKE.new_NDBufferVector__SWIG_0(), true) {
  }

  public NDBufferVector(NDBufferVector other) : this(nrtPINVOKE.new_NDBufferVector__SWIG_1(NDBufferVector.getCPtr(other)), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Clear() {
    nrtPINVOKE.NDBufferVector_Clear(swigCPtr);
  }

  public void Add(NDBuffer x) {
    nrtPINVOKE.NDBufferVector_Add(swigCPtr, NDBuffer.getCPtr(x));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  private uint size() {
    uint ret = nrtPINVOKE.NDBufferVector_size(swigCPtr);
    return ret;
  }

  private bool empty() {
    bool ret = nrtPINVOKE.NDBufferVector_empty(swigCPtr);
    return ret;
  }

  private uint capacity() {
    uint ret = nrtPINVOKE.NDBufferVector_capacity(swigCPtr);
    return ret;
  }

  private void reserve(uint n) {
    nrtPINVOKE.NDBufferVector_reserve(swigCPtr, n);
  }

  public NDBufferVector(int capacity) : this(nrtPINVOKE.new_NDBufferVector__SWIG_2(capacity), true) {
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  private NDBuffer getitemcopy(int index) {
    NDBuffer ret = new NDBuffer(nrtPINVOKE.NDBufferVector_getitemcopy(swigCPtr, index), true);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private NDBuffer getitem(int index) {
    NDBuffer ret = new NDBuffer(nrtPINVOKE.NDBufferVector_getitem(swigCPtr, index), false);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(int index, NDBuffer val) {
    nrtPINVOKE.NDBufferVector_setitem(swigCPtr, index, NDBuffer.getCPtr(val));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddRange(NDBufferVector values) {
    nrtPINVOKE.NDBufferVector_AddRange(swigCPtr, NDBufferVector.getCPtr(values));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public NDBufferVector GetRange(int index, int count) {
    global::System.IntPtr cPtr = nrtPINVOKE.NDBufferVector_GetRange(swigCPtr, index, count);
    NDBufferVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new NDBufferVector(cPtr, true);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Insert(int index, NDBuffer x) {
    nrtPINVOKE.NDBufferVector_Insert(swigCPtr, index, NDBuffer.getCPtr(x));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public void InsertRange(int index, NDBufferVector values) {
    nrtPINVOKE.NDBufferVector_InsertRange(swigCPtr, index, NDBufferVector.getCPtr(values));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAt(int index) {
    nrtPINVOKE.NDBufferVector_RemoveAt(swigCPtr, index);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveRange(int index, int count) {
    nrtPINVOKE.NDBufferVector_RemoveRange(swigCPtr, index, count);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public static NDBufferVector Repeat(NDBuffer value, int count) {
    global::System.IntPtr cPtr = nrtPINVOKE.NDBufferVector_Repeat(NDBuffer.getCPtr(value), count);
    NDBufferVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new NDBufferVector(cPtr, true);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Reverse() {
    nrtPINVOKE.NDBufferVector_Reverse__SWIG_0(swigCPtr);
  }

  public void Reverse(int index, int count) {
    nrtPINVOKE.NDBufferVector_Reverse__SWIG_1(swigCPtr, index, count);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRange(int index, NDBufferVector values) {
    nrtPINVOKE.NDBufferVector_SetRange(swigCPtr, index, NDBufferVector.getCPtr(values));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
namespace nrt {

class nrtPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="SWIGRegisterExceptionCallbacks_nrt")]
    public static extern void SWIGRegisterExceptionCallbacks_nrt(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_nrt")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_nrt(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new global::System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new global::System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new global::System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new global::System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new global::System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new global::System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new global::System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new global::System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new global::System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new global::System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new global::System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new global::System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_nrt(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_nrt(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [global::System.ThreadStatic]
    private static global::System.Exception pendingException = null;
    private static int numExceptionsPending = 0;
    private static global::System.Object exceptionsLock = null;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(global::System.Exception e) {
      if (pendingException != null)
        throw new global::System.ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(exceptionsLock) {
        numExceptionsPending++;
      }
    }

    public static global::System.Exception Retrieve() {
      global::System.Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(exceptionsLock) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }

    static SWIGPendingException() {
      exceptionsLock = new global::System.Object();
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="SWIGRegisterStringCallback_nrt")]
    public static extern void SWIGRegisterStringCallback_nrt(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_nrt(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static nrtPINVOKE() {
  }


  protected class SWIGWStringHelper {

    [return: global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]
    public delegate string SWIGWStringDelegate(global::System.IntPtr message, int length);
    static SWIGWStringDelegate wstringUTF16Delegate = new SWIGWStringDelegate(CreateWStringFromUTF16);
    static SWIGWStringDelegate wstringUTF32Delegate = new SWIGWStringDelegate(CreateWStringFromUTF32);

    [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="SWIGRegisterWStringCallback_nrt")]
    public static extern void SWIGRegisterWStringCallback_nrt(SWIGWStringDelegate wstringUTF16Delegate, SWIGWStringDelegate wstringUTF32Delegate);

    public static string CreateWStringFromUTF16([global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]global::System.IntPtr cString, int length) {
      return global::System.Runtime.InteropServices.Marshal.PtrToStringUni(cString, length);
    }

    public static string CreateWStringFromUTF32([global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]global::System.IntPtr cString, int length) {
      if (length == 0)
        return string.Empty;

      byte[] buffer = new byte[length * 4];
      global::System.Runtime.InteropServices.Marshal.Copy(cString, buffer, 0, buffer.Length);
      return global::System.Text.Encoding.UTF32.GetString(buffer);
    }

    static SWIGWStringHelper() {
      SWIGRegisterWStringCallback_nrt(wstringUTF16Delegate, wstringUTF32Delegate);
    }
  }

  static protected SWIGWStringHelper swigWStringHelper = new SWIGWStringHelper();


  protected class SWIGWStringExceptionHelper {

    [return: global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]
    public delegate void SWIGWStringExceptionDelegate(global::System.IntPtr message, int length);
    static SWIGWStringExceptionDelegate applicationExceptionUTF16Delegate = new SWIGWStringExceptionDelegate(SetPendingApplicationExceptionUTF16);
    static SWIGWStringExceptionDelegate applicationExceptionUTF32Delegate = new SWIGWStringExceptionDelegate(SetPendingApplicationExceptionUTF32);

    [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="SWIGRegisterWStringExceptionCallback_nrt")]
    public static extern void SWIGRegisterWStringExceptionCallback_nrt(SWIGWStringExceptionDelegate applicationExceptionUTF16Delegate, SWIGWStringExceptionDelegate applicationExceptionUTF32Delegate);

    static string CreateWStringFromUTF16([global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]global::System.IntPtr cString, int length) {
      return global::System.Runtime.InteropServices.Marshal.PtrToStringUni(cString, length);
    }

    public static string CreateWStringFromUTF32([global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]global::System.IntPtr cString, int length) {
      if (length == 0)
        return string.Empty;

      byte[] buffer = new byte[length * 4];
      return global::System.Text.Encoding.UTF32.GetString(buffer);
    }

    static void SetPendingApplicationExceptionUTF16([global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]global::System.IntPtr cString, int length) {
      string message = SWIGWStringHelper.CreateWStringFromUTF16(cString, length);
      SWIGPendingException.Set(new global::System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingApplicationExceptionUTF32([global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]global::System.IntPtr cString, int length) {
      string message = SWIGWStringHelper.CreateWStringFromUTF32(cString, length);
      SWIGPendingException.Set(new global::System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }

    static SWIGWStringExceptionHelper() {
      SWIGRegisterWStringExceptionCallback_nrt(applicationExceptionUTF16Delegate, applicationExceptionUTF32Delegate);
    }
  }

  static protected SWIGWStringExceptionHelper swigWStringExceptionHelper = new SWIGWStringExceptionHelper();


  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_StringVector__SWIG_0")]
  public static extern global::System.IntPtr new_StringVector__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_StringVector__SWIG_1")]
  public static extern global::System.IntPtr new_StringVector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_StringVector_Clear")]
  public static extern void StringVector_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_StringVector_Add")]
  public static extern void StringVector_Add(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_StringVector_size")]
  public static extern uint StringVector_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_StringVector_empty")]
  public static extern bool StringVector_empty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_StringVector_capacity")]
  public static extern uint StringVector_capacity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_StringVector_reserve")]
  public static extern void StringVector_reserve(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_StringVector__SWIG_2")]
  public static extern global::System.IntPtr new_StringVector__SWIG_2(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_StringVector_getitemcopy")]
  public static extern string StringVector_getitemcopy(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_StringVector_getitem")]
  public static extern string StringVector_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_StringVector_setitem")]
  public static extern void StringVector_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_StringVector_AddRange")]
  public static extern void StringVector_AddRange(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_StringVector_GetRange")]
  public static extern global::System.IntPtr StringVector_GetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_StringVector_Insert")]
  public static extern void StringVector_Insert(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_StringVector_InsertRange")]
  public static extern void StringVector_InsertRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_StringVector_RemoveAt")]
  public static extern void StringVector_RemoveAt(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_StringVector_RemoveRange")]
  public static extern void StringVector_RemoveRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_StringVector_Repeat")]
  public static extern global::System.IntPtr StringVector_Repeat(string jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_StringVector_Reverse__SWIG_0")]
  public static extern void StringVector_Reverse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_StringVector_Reverse__SWIG_1")]
  public static extern void StringVector_Reverse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_StringVector_SetRange")]
  public static extern void StringVector_SetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_StringVector_Contains")]
  public static extern bool StringVector_Contains(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_StringVector_IndexOf")]
  public static extern int StringVector_IndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_StringVector_LastIndexOf")]
  public static extern int StringVector_LastIndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_StringVector_Remove")]
  public static extern bool StringVector_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_StringVector")]
  public static extern void delete_StringVector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_FloatVector__SWIG_0")]
  public static extern global::System.IntPtr new_FloatVector__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_FloatVector__SWIG_1")]
  public static extern global::System.IntPtr new_FloatVector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FloatVector_Clear")]
  public static extern void FloatVector_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FloatVector_Add")]
  public static extern void FloatVector_Add(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FloatVector_size")]
  public static extern uint FloatVector_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FloatVector_empty")]
  public static extern bool FloatVector_empty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FloatVector_capacity")]
  public static extern uint FloatVector_capacity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FloatVector_reserve")]
  public static extern void FloatVector_reserve(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_FloatVector__SWIG_2")]
  public static extern global::System.IntPtr new_FloatVector__SWIG_2(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FloatVector_getitemcopy")]
  public static extern float FloatVector_getitemcopy(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FloatVector_getitem")]
  public static extern float FloatVector_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FloatVector_setitem")]
  public static extern void FloatVector_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FloatVector_AddRange")]
  public static extern void FloatVector_AddRange(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FloatVector_GetRange")]
  public static extern global::System.IntPtr FloatVector_GetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FloatVector_Insert")]
  public static extern void FloatVector_Insert(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FloatVector_InsertRange")]
  public static extern void FloatVector_InsertRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FloatVector_RemoveAt")]
  public static extern void FloatVector_RemoveAt(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FloatVector_RemoveRange")]
  public static extern void FloatVector_RemoveRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FloatVector_Repeat")]
  public static extern global::System.IntPtr FloatVector_Repeat(float jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FloatVector_Reverse__SWIG_0")]
  public static extern void FloatVector_Reverse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FloatVector_Reverse__SWIG_1")]
  public static extern void FloatVector_Reverse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FloatVector_SetRange")]
  public static extern void FloatVector_SetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FloatVector_Contains")]
  public static extern bool FloatVector_Contains(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FloatVector_IndexOf")]
  public static extern int FloatVector_IndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FloatVector_LastIndexOf")]
  public static extern int FloatVector_LastIndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FloatVector_Remove")]
  public static extern bool FloatVector_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_FloatVector")]
  public static extern void delete_FloatVector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NRT_INITIALIZE_PARAM_get")]
  public static extern int NRT_INITIALIZE_PARAM_get();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NRT_MIN_IMG_HW_get")]
  public static extern int NRT_MIN_IMG_HW_get();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NRT_MAX_IMG_C_get")]
  public static extern int NRT_MAX_IMG_C_get();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NRT_KEY_WORKSPACE_SIZE_get")]
  public static extern string NRT_KEY_WORKSPACE_SIZE_get();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_dtype_to_str")]
  public static extern string dtype_to_str(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Shape_DIM_UNKNOWN_get")]
  public static extern int Shape_DIM_UNKNOWN_get();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Shape_MAX_DIM_get")]
  public static extern int Shape_MAX_DIM_get();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Shape__SWIG_0")]
  public static extern global::System.IntPtr new_Shape__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Shape__SWIG_1")]
  public static extern global::System.IntPtr new_Shape__SWIG_1(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Shape__SWIG_2")]
  public static extern global::System.IntPtr new_Shape__SWIG_2(int jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Shape__SWIG_3")]
  public static extern global::System.IntPtr new_Shape__SWIG_3(int jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Shape__SWIG_4")]
  public static extern global::System.IntPtr new_Shape__SWIG_4(int jarg1, int jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Shape__SWIG_5")]
  public static extern global::System.IntPtr new_Shape__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Shape_get_axis")]
  public static extern int Shape_get_axis(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Shape_set_axis")]
  public static extern void Shape_set_axis(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Shape_get_dim")]
  public static extern int Shape_get_dim(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Shape_to_batch_shape")]
  public static extern global::System.IntPtr Shape_to_batch_shape(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Shape_num_dim_set")]
  public static extern void Shape_num_dim_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Shape_num_dim_get")]
  public static extern int Shape_num_dim_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_Shape")]
  public static extern void delete_Shape(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Roi_original_image_width_set")]
  public static extern void Roi_original_image_width_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Roi_original_image_width_get")]
  public static extern int Roi_original_image_width_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Roi_original_image_height_set")]
  public static extern void Roi_original_image_height_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Roi_original_image_height_get")]
  public static extern int Roi_original_image_height_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Roi_x_set")]
  public static extern void Roi_x_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Roi_x_get")]
  public static extern int Roi_x_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Roi_y_set")]
  public static extern void Roi_y_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Roi_y_get")]
  public static extern int Roi_y_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Roi_width_set")]
  public static extern void Roi_width_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Roi_width_get")]
  public static extern int Roi_width_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Roi_height_set")]
  public static extern void Roi_height_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Roi_height_get")]
  public static extern int Roi_height_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Roi")]
  public static extern global::System.IntPtr new_Roi();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_Roi")]
  public static extern void delete_Roi(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_BoxRule_order_column_set")]
  public static extern void BoxRule_order_column_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_BoxRule_order_column_get")]
  public static extern int BoxRule_order_column_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_BoxRule_condition_category_set")]
  public static extern void BoxRule_condition_category_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_BoxRule_condition_category_get")]
  public static extern global::System.IntPtr BoxRule_condition_category_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_BoxRule_condition_fixed_value_set")]
  public static extern void BoxRule_condition_fixed_value_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_BoxRule_condition_fixed_value_get")]
  public static extern global::System.IntPtr BoxRule_condition_fixed_value_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_BoxRule_condition_priority_set")]
  public static extern void BoxRule_condition_priority_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_BoxRule_condition_priority_get")]
  public static extern bool BoxRule_condition_priority_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_BoxRule_x_set")]
  public static extern void BoxRule_x_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_BoxRule_x_get")]
  public static extern int BoxRule_x_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_BoxRule_y_set")]
  public static extern void BoxRule_y_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_BoxRule_y_get")]
  public static extern int BoxRule_y_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_BoxRule_width_set")]
  public static extern void BoxRule_width_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_BoxRule_width_get")]
  public static extern int BoxRule_width_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_BoxRule_height_set")]
  public static extern void BoxRule_height_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_BoxRule_height_get")]
  public static extern int BoxRule_height_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_BoxRule_correction_dict_set")]
  public static extern void BoxRule_correction_dict_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_BoxRule_correction_dict_get")]
  public static extern global::System.IntPtr BoxRule_correction_dict_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_BoxRule")]
  public static extern global::System.IntPtr new_BoxRule();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_BoxRule")]
  public static extern void delete_BoxRule(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_TextRule_name_set")]
  public static extern void TextRule_name_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_TextRule_name_get")]
  public static extern string TextRule_name_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_TextRule_occurrence_set")]
  public static extern void TextRule_occurrence_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_TextRule_occurrence_get")]
  public static extern int TextRule_occurrence_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_TextRule_threshold_set")]
  public static extern void TextRule_threshold_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_TextRule_threshold_get")]
  public static extern float TextRule_threshold_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_TextRule_min_matches_set")]
  public static extern void TextRule_min_matches_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_TextRule_min_matches_get")]
  public static extern int TextRule_min_matches_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_TextRule_roi_set")]
  public static extern void TextRule_roi_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_TextRule_roi_get")]
  public static extern global::System.IntPtr TextRule_roi_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_TextRule_textruleboxes_set")]
  public static extern void TextRule_textruleboxes_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_TextRule_textruleboxes_get")]
  public static extern global::System.IntPtr TextRule_textruleboxes_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_TextRule")]
  public static extern global::System.IntPtr new_TextRule();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_TextRule")]
  public static extern void delete_TextRule(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_NDBuffer__SWIG_0")]
  public static extern global::System.IntPtr new_NDBuffer__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_NDBuffer__SWIG_1")]
  public static extern global::System.IntPtr new_NDBuffer__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_NDBuffer__SWIG_2")]
  public static extern global::System.IntPtr new_NDBuffer__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_NDBuffer__SWIG_3")]
  public static extern global::System.IntPtr new_NDBuffer__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_NDBuffer__SWIG_4")]
  public static extern global::System.IntPtr new_NDBuffer__SWIG_4([global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]byte[] jarg1, ulong jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_NDBuffer__SWIG_5")]
  public static extern global::System.IntPtr new_NDBuffer__SWIG_5([global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]byte[] jarg1, ulong jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_zeros")]
  public static extern global::System.IntPtr NDBuffer_zeros(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_make_size_thres")]
  public static extern global::System.IntPtr NDBuffer_make_size_thres(int jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_make_roi_info")]
  public static extern global::System.IntPtr NDBuffer_make_roi_info(int jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_NDBuffer")]
  public static extern void delete_NDBuffer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_NDBuffer__SWIG_6")]
  public static extern global::System.IntPtr new_NDBuffer__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_copy_to_buffer__SWIG_0")]
  public static extern int NDBuffer_copy_to_buffer__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]byte[] jarg2, ulong jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_copy_from_buffer__SWIG_0")]
  public static extern int NDBuffer_copy_from_buffer__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]byte[] jarg2, ulong jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_copy_to_buffer__SWIG_1")]
  public static extern int NDBuffer_copy_to_buffer__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]byte[] jarg3, ulong jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_copy_from_buffer__SWIG_1")]
  public static extern int NDBuffer_copy_from_buffer__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]byte[] jarg3, ulong jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_get_total_size")]
  public static extern ulong NDBuffer_get_total_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_get_byte_size")]
  public static extern ulong NDBuffer_get_byte_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_get_data_ptr")]
  public static extern global::System.IntPtr NDBuffer_get_data_ptr(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_get_at_ptr__SWIG_0")]
  public static extern global::System.IntPtr NDBuffer_get_at_ptr__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, int jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_get_at_ptr__SWIG_1")]
  public static extern global::System.IntPtr NDBuffer_get_at_ptr__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_get_at_ptr__SWIG_2")]
  public static extern global::System.IntPtr NDBuffer_get_at_ptr__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_get_at_ptr__SWIG_3")]
  public static extern global::System.IntPtr NDBuffer_get_at_ptr__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_get_at_ptr__SWIG_4")]
  public static extern global::System.IntPtr NDBuffer_get_at_ptr__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_get_dtype")]
  public static extern int NDBuffer_get_dtype(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_get_shape")]
  public static extern global::System.IntPtr NDBuffer_get_shape(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_clone")]
  public static extern global::System.IntPtr NDBuffer_clone(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_reset__SWIG_0")]
  public static extern void NDBuffer_reset__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_reset__SWIG_1")]
  public static extern void NDBuffer_reset__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_empty")]
  public static extern bool NDBuffer_empty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_int64")]
  public static extern global::System.IntPtr NDBuffer_int64(long jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_load_image")]
  public static extern global::System.IntPtr NDBuffer_load_image([global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]string jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_load_images__SWIG_0")]
  public static extern global::System.IntPtr NDBuffer_load_images__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]string jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_load_images__SWIG_1")]
  public static extern global::System.IntPtr NDBuffer_load_images__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]string jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer__dbg_show")]
  public static extern void NDBuffer__dbg_show(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer__dbg_colormap_show")]
  public static extern void NDBuffer__dbg_colormap_show(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_copy_from_buffer_uint8__SWIG_0")]
  public static extern int NDBuffer_copy_from_buffer_uint8__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]byte[] jarg2, ulong jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_copy_from_buffer_uint8__SWIG_1")]
  public static extern int NDBuffer_copy_from_buffer_uint8__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]byte[] jarg3, ulong jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_copy_from_buffer_int16__SWIG_0")]
  public static extern int NDBuffer_copy_from_buffer_int16__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.Out, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]short[] jarg2, ulong jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_copy_from_buffer_int16__SWIG_1")]
  public static extern int NDBuffer_copy_from_buffer_int16__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.Out, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]short[] jarg3, ulong jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_copy_from_buffer_uint16__SWIG_0")]
  public static extern int NDBuffer_copy_from_buffer_uint16__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.Out, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]ushort[] jarg2, ulong jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_copy_from_buffer_uint16__SWIG_1")]
  public static extern int NDBuffer_copy_from_buffer_uint16__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.Out, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]ushort[] jarg3, ulong jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_copy_from_buffer_int32__SWIG_0")]
  public static extern int NDBuffer_copy_from_buffer_int32__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.Out, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]int[] jarg2, ulong jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_copy_from_buffer_int32__SWIG_1")]
  public static extern int NDBuffer_copy_from_buffer_int32__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.Out, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]int[] jarg3, ulong jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_copy_from_buffer_uint32__SWIG_0")]
  public static extern int NDBuffer_copy_from_buffer_uint32__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.Out, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]uint[] jarg2, ulong jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_copy_from_buffer_uint32__SWIG_1")]
  public static extern int NDBuffer_copy_from_buffer_uint32__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.Out, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]uint[] jarg3, ulong jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_copy_from_buffer_int64__SWIG_0")]
  public static extern int NDBuffer_copy_from_buffer_int64__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.Out, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]long[] jarg2, ulong jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_copy_from_buffer_int64__SWIG_1")]
  public static extern int NDBuffer_copy_from_buffer_int64__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.Out, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]long[] jarg3, ulong jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_copy_from_buffer_uint64__SWIG_0")]
  public static extern int NDBuffer_copy_from_buffer_uint64__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.Out, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]ulong[] jarg2, ulong jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_copy_from_buffer_uint64__SWIG_1")]
  public static extern int NDBuffer_copy_from_buffer_uint64__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.Out, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]ulong[] jarg3, ulong jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_copy_from_buffer_float32__SWIG_0")]
  public static extern int NDBuffer_copy_from_buffer_float32__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.Out, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]float[] jarg2, ulong jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_copy_from_buffer_float32__SWIG_1")]
  public static extern int NDBuffer_copy_from_buffer_float32__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.Out, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]float[] jarg3, ulong jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_copy_from_buffer_float64__SWIG_0")]
  public static extern int NDBuffer_copy_from_buffer_float64__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.Out, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]double[] jarg2, ulong jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_copy_from_buffer_float64__SWIG_1")]
  public static extern int NDBuffer_copy_from_buffer_float64__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.Out, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]double[] jarg3, ulong jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_copy_to_buffer_uint8__SWIG_0")]
  public static extern int NDBuffer_copy_to_buffer_uint8__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]byte[] jarg2, ulong jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_copy_to_buffer_uint8__SWIG_1")]
  public static extern int NDBuffer_copy_to_buffer_uint8__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]byte[] jarg3, ulong jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_copy_to_buffer_int16__SWIG_0")]
  public static extern int NDBuffer_copy_to_buffer_int16__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.Out, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]short[] jarg2, ulong jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_copy_to_buffer_int16__SWIG_1")]
  public static extern int NDBuffer_copy_to_buffer_int16__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.Out, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]short[] jarg3, ulong jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_copy_to_buffer_uint16__SWIG_0")]
  public static extern int NDBuffer_copy_to_buffer_uint16__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.Out, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]ushort[] jarg2, ulong jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_copy_to_buffer_uint16__SWIG_1")]
  public static extern int NDBuffer_copy_to_buffer_uint16__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.Out, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]ushort[] jarg3, ulong jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_copy_to_buffer_int32__SWIG_0")]
  public static extern int NDBuffer_copy_to_buffer_int32__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.Out, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]int[] jarg2, ulong jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_copy_to_buffer_int32__SWIG_1")]
  public static extern int NDBuffer_copy_to_buffer_int32__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.Out, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]int[] jarg3, ulong jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_copy_to_buffer_uint32__SWIG_0")]
  public static extern int NDBuffer_copy_to_buffer_uint32__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.Out, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]uint[] jarg2, ulong jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_copy_to_buffer_uint32__SWIG_1")]
  public static extern int NDBuffer_copy_to_buffer_uint32__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.Out, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]uint[] jarg3, ulong jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_copy_to_buffer_int64__SWIG_0")]
  public static extern int NDBuffer_copy_to_buffer_int64__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.Out, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]long[] jarg2, ulong jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_copy_to_buffer_int64__SWIG_1")]
  public static extern int NDBuffer_copy_to_buffer_int64__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.Out, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]long[] jarg3, ulong jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_copy_to_buffer_uint64__SWIG_0")]
  public static extern int NDBuffer_copy_to_buffer_uint64__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.Out, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]ulong[] jarg2, ulong jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_copy_to_buffer_uint64__SWIG_1")]
  public static extern int NDBuffer_copy_to_buffer_uint64__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.Out, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]ulong[] jarg3, ulong jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_copy_to_buffer_float32__SWIG_0")]
  public static extern int NDBuffer_copy_to_buffer_float32__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.Out, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]float[] jarg2, ulong jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_copy_to_buffer_float32__SWIG_1")]
  public static extern int NDBuffer_copy_to_buffer_float32__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.Out, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]float[] jarg3, ulong jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_copy_to_buffer_float64__SWIG_0")]
  public static extern int NDBuffer_copy_to_buffer_float64__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.Out, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]double[] jarg2, ulong jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBuffer_copy_to_buffer_float64__SWIG_1")]
  public static extern int NDBuffer_copy_to_buffer_float64__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.Out, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]double[] jarg3, ulong jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_NDBufferList__SWIG_0")]
  public static extern global::System.IntPtr new_NDBufferList__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_NDBufferList")]
  public static extern void delete_NDBufferList(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_NDBufferList__SWIG_1")]
  public static extern global::System.IntPtr new_NDBufferList__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBufferList_get_count")]
  public static extern ulong NDBufferList_get_count(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBufferList_append")]
  public static extern void NDBufferList_append(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBufferList_get_at__SWIG_0")]
  public static extern global::System.IntPtr NDBufferList_get_at__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBufferList_get_data_ptr__SWIG_0")]
  public static extern global::System.IntPtr NDBufferList_get_data_ptr__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBufferList_resize")]
  public static extern void NDBufferList_resize(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBufferList_clear")]
  public static extern void NDBufferList_clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_get_dtype_elemsize")]
  public static extern int get_dtype_elemsize(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Device_devtype_set")]
  public static extern void Device_devtype_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Device_devtype_get")]
  public static extern int Device_devtype_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Device_id_set")]
  public static extern void Device_id_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Device_id_get")]
  public static extern int Device_id_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Device_get_num_devices__SWIG_0")]
  public static extern int Device_get_num_devices__SWIG_0(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Device_get_num_devices__SWIG_1")]
  public static extern int Device_get_num_devices__SWIG_1();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Device_get_device__SWIG_0")]
  public static extern global::System.IntPtr Device_get_device__SWIG_0(int jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Device_get_device__SWIG_1")]
  public static extern global::System.IntPtr Device_get_device__SWIG_1(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Device_get_gpu_device__SWIG_0")]
  public static extern global::System.IntPtr Device_get_gpu_device__SWIG_0(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Device_get_gpu_device__SWIG_1")]
  public static extern global::System.IntPtr Device_get_gpu_device__SWIG_1(int jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Device_get_cpu_device__SWIG_0")]
  public static extern global::System.IntPtr Device_get_cpu_device__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Device_get_cpu_device__SWIG_1")]
  public static extern global::System.IntPtr Device_get_cpu_device__SWIG_1(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Device_list_available_devices__SWIG_0")]
  public static extern global::System.IntPtr Device_list_available_devices__SWIG_0(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Device_list_available_devices__SWIG_1")]
  public static extern global::System.IntPtr Device_list_available_devices__SWIG_1();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Device_get_num_gpu_devices")]
  public static extern int Device_get_num_gpu_devices();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Device_get_gpu_mem_info")]
  public static extern int Device_get_gpu_mem_info(int jarg1, ref ulong jarg2, ref ulong jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Device_get_device_name")]
  public static extern string Device_get_device_name(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Device")]
  public static extern global::System.IntPtr new_Device();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_Device")]
  public static extern void delete_Device(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Dict__SWIG_0")]
  public static extern global::System.IntPtr new_Dict__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_Dict")]
  public static extern void delete_Dict(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Dict__SWIG_1")]
  public static extern global::System.IntPtr new_Dict__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Dict_put")]
  public static extern int Dict_put(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Dict_has_key")]
  public static extern bool Dict_has_key(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Dict_get")]
  public static extern global::System.IntPtr Dict_get(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Dict_remove")]
  public static extern int Dict_remove(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Dict_get_count")]
  public static extern ulong Dict_get_count(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Dict_clear")]
  public static extern void Dict_clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_zero_padding__SWIG_0")]
  public static extern int zero_padding__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_zero_padding__SWIG_1")]
  public static extern int zero_padding__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_set_roi")]
  public static extern int set_roi(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_set_mask")]
  public static extern int set_mask(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_set_roi_mask")]
  public static extern int set_roi_mask(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_resize__SWIG_0")]
  public static extern int resize__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_resize__SWIG_1")]
  public static extern int resize__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_resize__SWIG_2")]
  public static extern int resize__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, float jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_resize__SWIG_3")]
  public static extern int resize__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_extract_patches_to_target_shape__SWIG_0")]
  public static extern int extract_patches_to_target_shape__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_merge_patches_to_orginal_shape__SWIG_0")]
  public static extern int merge_patches_to_orginal_shape__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_merge_patches_to_orginal_shape__SWIG_1")]
  public static extern int merge_patches_to_orginal_shape__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_pred_map_threshold_by_size")]
  public static extern int pred_map_threshold_by_size(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_pred_box_threshold_by_size")]
  public static extern int pred_box_threshold_by_size(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2, double jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_prob_map_threshold__SWIG_0")]
  public static extern int prob_map_threshold__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_prob_map_threshold__SWIG_1")]
  public static extern int prob_map_threshold__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_prob_map_threshold__SWIG_2")]
  public static extern int prob_map_threshold__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_prob_map_threshold__SWIG_3")]
  public static extern int prob_map_threshold__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_pred_map_threshold_by_pixel_prob__SWIG_0")]
  public static extern int pred_map_threshold_by_pixel_prob__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_pred_map_threshold_by_pixel_prob__SWIG_1")]
  public static extern int pred_map_threshold_by_pixel_prob__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_pred_map_threshold_by_blob_prob__SWIG_0")]
  public static extern int pred_map_threshold_by_blob_prob__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_pred_map_threshold_by_blob_prob__SWIG_1")]
  public static extern int pred_map_threshold_by_blob_prob__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_convert_to_colormap")]
  public static extern int convert_to_colormap(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_extract_patches_to_target_shape__SWIG_1")]
  public static extern int extract_patches_to_target_shape__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, float jarg6);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Model_MODELIO_DEFAULT_get")]
  public static extern int Model_MODELIO_DEFAULT_get();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Model_MODELIO_IN_IMAGE_get")]
  public static extern int Model_MODELIO_IN_IMAGE_get();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Model_MODELIO_OUT_PRED_get")]
  public static extern int Model_MODELIO_OUT_PRED_get();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Model_MODELIO_OUT_PROB_get")]
  public static extern int Model_MODELIO_OUT_PROB_get();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Model_MODELIO_OUT_CAM_get")]
  public static extern int Model_MODELIO_OUT_CAM_get();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Model_MODELIO_OUT_ANOMALY_SCORE_get")]
  public static extern int Model_MODELIO_OUT_ANOMALY_SCORE_get();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Model_MODELIO_OUT_ROTATION_DEGREE_get")]
  public static extern int Model_MODELIO_OUT_ROTATION_DEGREE_get();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Model__SWIG_0")]
  public static extern global::System.IntPtr new_Model__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Model__SWIG_1")]
  public static extern global::System.IntPtr new_Model__SWIG_1([global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]string jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Model__SWIG_2")]
  public static extern global::System.IntPtr new_Model__SWIG_2([global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]string jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Model__SWIG_3")]
  public static extern global::System.IntPtr new_Model__SWIG_3([global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]string jarg1, bool jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Model__SWIG_4")]
  public static extern global::System.IntPtr new_Model__SWIG_4([global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]string jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_Model")]
  public static extern void delete_Model(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Model__SWIG_5")]
  public static extern global::System.IntPtr new_Model__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Model_get_model_type__SWIG_0")]
  public static extern int Model_get_model_type__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Model_get_model_version")]
  public static extern string Model_get_model_version(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Model_get_status")]
  public static extern int Model_get_status(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Model_get_num_inputs")]
  public static extern int Model_get_num_inputs(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Model_get_input_shape")]
  public static extern global::System.IntPtr Model_get_input_shape(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Model_get_rotocr_input_shape")]
  public static extern global::System.IntPtr Model_get_rotocr_input_shape(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Model_get_input_dtype")]
  public static extern int Model_get_input_dtype(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Model_get_input_name")]
  public static extern string Model_get_input_name(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Model_get_InterpolationType__SWIG_0")]
  public static extern int Model_get_InterpolationType__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Model_is_patch_mode__SWIG_0")]
  public static extern bool Model_is_patch_mode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Model_get_scale_factor__SWIG_0")]
  public static extern float Model_get_scale_factor__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Model_get_num_outputs")]
  public static extern int Model_get_num_outputs(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Model_get_output_shape")]
  public static extern global::System.IntPtr Model_get_output_shape(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Model_get_output_dtype")]
  public static extern int Model_get_output_dtype(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Model_get_output_name")]
  public static extern string Model_get_output_name(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Model_get_output_flag")]
  public static extern int Model_get_output_flag(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Model_get_num_classes")]
  public static extern int Model_get_num_classes(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Model_get_class_name")]
  public static extern string Model_get_class_name(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Model_get_model_name")]
  public static extern string Model_get_model_name(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Model_get_training_type")]
  public static extern string Model_get_training_type(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Model_get_training_inference_time_level")]
  public static extern int Model_get_training_inference_time_level(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Model_get_training_search_space_level")]
  public static extern int Model_get_training_search_space_level(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Model_get_threshold_mode__SWIG_0")]
  public static extern int Model_get_threshold_mode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Model_get_prob_threshold__SWIG_0")]
  public static extern global::System.IntPtr Model_get_prob_threshold__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Model_get_size_threshold__SWIG_0")]
  public static extern global::System.IntPtr Model_get_size_threshold__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Model_get_preprocessing_input_size__SWIG_0")]
  public static extern global::System.IntPtr Model_get_preprocessing_input_size__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Model_get_roi_info__SWIG_0")]
  public static extern global::System.IntPtr Model_get_roi_info__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Model_get_mask_info__SWIG_0")]
  public static extern global::System.IntPtr Model_get_mask_info__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Model_get_text_rule__SWIG_0")]
  public static extern global::System.IntPtr Model_get_text_rule__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Model_set_text_rule__SWIG_0")]
  public static extern void Model_set_text_rule__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Model_has_io_flag")]
  public static extern bool Model_has_io_flag(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Model_destroy")]
  public static extern int Model_destroy(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_match_with_template__SWIG_0")]
  public static extern int match_with_template__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_match_with_template__SWIG_1")]
  public static extern int match_with_template__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_ExecutorConfig__SWIG_0")]
  public static extern global::System.IntPtr new_ExecutorConfig__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_ExecutorConfig")]
  public static extern void delete_ExecutorConfig(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_ExecutorConfig__SWIG_1")]
  public static extern global::System.IntPtr new_ExecutorConfig__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_ExecutorConfig_set_fp16flag")]
  public static extern global::System.IntPtr ExecutorConfig_set_fp16flag(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_ExecutorConfig_get_fp16flag")]
  public static extern bool ExecutorConfig_get_fp16flag(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_ExecutorConfig_set_workspace_size")]
  public static extern global::System.IntPtr ExecutorConfig_set_workspace_size(global::System.Runtime.InteropServices.HandleRef jarg1, ulong jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_ExecutorConfig_get_workspace_size")]
  public static extern ulong ExecutorConfig_get_workspace_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Executor__SWIG_0")]
  public static extern global::System.IntPtr new_Executor__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Executor__SWIG_1")]
  public static extern global::System.IntPtr new_Executor__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Executor__SWIG_2")]
  public static extern global::System.IntPtr new_Executor__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Executor__SWIG_3")]
  public static extern global::System.IntPtr new_Executor__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Executor__SWIG_4")]
  public static extern global::System.IntPtr new_Executor__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, [global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]string jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_Executor")]
  public static extern void delete_Executor(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Executor__SWIG_5")]
  public static extern global::System.IntPtr new_Executor__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Executor_execute__SWIG_0")]
  public static extern int Executor_execute__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Executor_execute__SWIG_1")]
  public static extern int Executor_execute__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Executor_save_executor")]
  public static extern int Executor_save_executor(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]string jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Executor_get_status")]
  public static extern int Executor_get_status(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Executor_destroy")]
  public static extern int Executor_destroy(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Executor_get_internalptr")]
  public static extern global::System.IntPtr Executor_get_internalptr(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Predictor__SWIG_0")]
  public static extern global::System.IntPtr new_Predictor__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Predictor__SWIG_1")]
  public static extern global::System.IntPtr new_Predictor__SWIG_1([global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]string jarg1, int jarg2, int jarg3, int jarg4, bool jarg5, bool jarg6, int jarg7);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Predictor__SWIG_2")]
  public static extern global::System.IntPtr new_Predictor__SWIG_2([global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]string jarg1, int jarg2, int jarg3, int jarg4, bool jarg5, bool jarg6);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Predictor__SWIG_3")]
  public static extern global::System.IntPtr new_Predictor__SWIG_3([global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]string jarg1, int jarg2, int jarg3, int jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Predictor__SWIG_4")]
  public static extern global::System.IntPtr new_Predictor__SWIG_4([global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]string jarg1, int jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Predictor__SWIG_5")]
  public static extern global::System.IntPtr new_Predictor__SWIG_5([global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]string jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Predictor__SWIG_6")]
  public static extern global::System.IntPtr new_Predictor__SWIG_6([global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]string jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Predictor__SWIG_7")]
  public static extern global::System.IntPtr new_Predictor__SWIG_7([global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]string jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Predictor__SWIG_8")]
  public static extern global::System.IntPtr new_Predictor__SWIG_8(int jarg1, [global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]string jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Predictor__SWIG_9")]
  public static extern global::System.IntPtr new_Predictor__SWIG_9(int jarg1, [global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]string jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Predictor__SWIG_10")]
  public static extern global::System.IntPtr new_Predictor__SWIG_10(int jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Predictor__SWIG_11")]
  public static extern global::System.IntPtr new_Predictor__SWIG_11(int jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Predictor__SWIG_12")]
  public static extern global::System.IntPtr new_Predictor__SWIG_12(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_Predictor")]
  public static extern void delete_Predictor(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Predictor_get_model_name")]
  public static extern string Predictor_get_model_name(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Predictor_get_model_type")]
  public static extern int Predictor_get_model_type(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Predictor_get_model_version")]
  public static extern string Predictor_get_model_version(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Predictor_get_num_classes")]
  public static extern int Predictor_get_num_classes(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Predictor_get_class_name")]
  public static extern string Predictor_get_class_name(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Predictor_is_patch_mode__SWIG_0")]
  public static extern bool Predictor_is_patch_mode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Predictor_is_patch_mode__SWIG_1")]
  public static extern bool Predictor_is_patch_mode__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Predictor_get_scale_factor")]
  public static extern float Predictor_get_scale_factor(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Predictor_get_threshold_mode")]
  public static extern int Predictor_get_threshold_mode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Predictor_get_prob_threshold")]
  public static extern global::System.IntPtr Predictor_get_prob_threshold(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Predictor_get_size_threshold")]
  public static extern global::System.IntPtr Predictor_get_size_threshold(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Predictor_get_preprocessing_input_size")]
  public static extern global::System.IntPtr Predictor_get_preprocessing_input_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Predictor_get_roi_info")]
  public static extern global::System.IntPtr Predictor_get_roi_info(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Predictor_get_mask_info")]
  public static extern global::System.IntPtr Predictor_get_mask_info(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Predictor_get_device_type")]
  public static extern int Predictor_get_device_type(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Predictor_get_batch_size")]
  public static extern int Predictor_get_batch_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Predictor_save_predictor__SWIG_0")]
  public static extern int Predictor_save_predictor__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]string jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Predictor_save_predictor__SWIG_1")]
  public static extern int Predictor_save_predictor__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Predictor_execute__SWIG_0")]
  public static extern int Predictor_execute__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Predictor_execute__SWIG_1")]
  public static extern int Predictor_execute__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Predictor_predict")]
  public static extern global::System.IntPtr Predictor_predict(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Predictor_get_status")]
  public static extern int Predictor_get_status(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Predictor_destroy")]
  public static extern int Predictor_destroy(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_PredictorEngine__SWIG_0")]
  public static extern global::System.IntPtr new_PredictorEngine__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_PredictorEngine__SWIG_1")]
  public static extern global::System.IntPtr new_PredictorEngine__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_PredictorEngine")]
  public static extern void delete_PredictorEngine(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Input__SWIG_0")]
  public static extern global::System.IntPtr new_Input__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Input__SWIG_1")]
  public static extern global::System.IntPtr new_Input__SWIG_1([global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]string jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Input__SWIG_2")]
  public static extern global::System.IntPtr new_Input__SWIG_2([global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]string jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Input__SWIG_3")]
  public static extern global::System.IntPtr new_Input__SWIG_3(global::System.IntPtr jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Input__SWIG_4")]
  public static extern global::System.IntPtr new_Input__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_Input")]
  public static extern void delete_Input(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Input__SWIG_5")]
  public static extern global::System.IntPtr new_Input__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Input_extend__SWIG_0")]
  public static extern int Input_extend__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]string jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Input_extend__SWIG_1")]
  public static extern int Input_extend__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]string jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Input_extend__SWIG_2")]
  public static extern int Input_extend__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Input_extend__SWIG_3")]
  public static extern int Input_extend__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Input_get_count")]
  public static extern ulong Input_get_count(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Input_get_org_input_ndbuffs")]
  public static extern global::System.IntPtr Input_get_org_input_ndbuffs(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Input_get_org_input_ndbuff")]
  public static extern global::System.IntPtr Input_get_org_input_ndbuff(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Input_get_org_input_shape")]
  public static extern global::System.IntPtr Input_get_org_input_shape(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Input_get_org_input_shapes__SWIG_0")]
  public static extern global::System.IntPtr Input_get_org_input_shapes__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Input_get_patch_info")]
  public static extern global::System.IntPtr Input_get_patch_info(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Input_get_input_ndbuff__SWIG_0")]
  public static extern global::System.IntPtr Input_get_input_ndbuff__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Input_get_input_ndbuff__SWIG_2")]
  public static extern global::System.IntPtr Input_get_input_ndbuff__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Input_set_overlap_ratio__SWIG_0")]
  public static extern void Input_set_overlap_ratio__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Input_set_overlap_ratio__SWIG_1")]
  public static extern void Input_set_overlap_ratio__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Input_get_overlap_ratio__SWIG_0")]
  public static extern float Input_get_overlap_ratio__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Input_clear")]
  public static extern void Input_clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Class__SWIG_0")]
  public static extern global::System.IntPtr new_Class__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Class__SWIG_1")]
  public static extern global::System.IntPtr new_Class__SWIG_1(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_Class")]
  public static extern void delete_Class(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Class__SWIG_2")]
  public static extern global::System.IntPtr new_Class__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Class_idx_set")]
  public static extern void Class_idx_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Class_idx_get")]
  public static extern int Class_idx_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Class_has_child")]
  public static extern bool Class_has_child(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Class_get_child_result")]
  public static extern global::System.IntPtr Class_get_child_result(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Class_set_child_result")]
  public static extern void Class_set_child_result(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_ClassList__SWIG_0")]
  public static extern global::System.IntPtr new_ClassList__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_ClassList")]
  public static extern void delete_ClassList(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_ClassList__SWIG_1")]
  public static extern global::System.IntPtr new_ClassList__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_ClassList_get_count")]
  public static extern ulong ClassList_get_count(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_ClassList_append")]
  public static extern void ClassList_append(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_ClassList_get__SWIG_0")]
  public static extern global::System.IntPtr ClassList_get__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_ClassList_get__SWIG_1")]
  public static extern global::System.IntPtr ClassList_get__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_ClassList_empty")]
  public static extern bool ClassList_empty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_ClassList_reserve")]
  public static extern void ClassList_reserve(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_ClassList_resize")]
  public static extern void ClassList_resize(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_ClassList_clear")]
  public static extern void ClassList_clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_ClassList_set_child_result")]
  public static extern void ClassList_set_child_result(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_ProbsList__SWIG_0")]
  public static extern global::System.IntPtr new_ProbsList__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_ProbsList")]
  public static extern void delete_ProbsList(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_ProbsList__SWIG_1")]
  public static extern global::System.IntPtr new_ProbsList__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_ProbsList_get_count")]
  public static extern ulong ProbsList_get_count(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_ProbsList_append")]
  public static extern void ProbsList_append(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_ProbsList_get__SWIG_0")]
  public static extern global::System.IntPtr ProbsList_get__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_ProbsList_get__SWIG_2")]
  public static extern float ProbsList_get__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_ProbsList_empty")]
  public static extern bool ProbsList_empty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_ProbsList_reserve")]
  public static extern void ProbsList_reserve(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_ProbsList_resize")]
  public static extern void ProbsList_resize(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_ProbsList_clear")]
  public static extern void ProbsList_clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_CAM__SWIG_0")]
  public static extern global::System.IntPtr new_CAM__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_CAM")]
  public static extern void delete_CAM(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_CAM__SWIG_1")]
  public static extern global::System.IntPtr new_CAM__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_CAM_get_height")]
  public static extern int CAM_get_height(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_CAM_get_width")]
  public static extern int CAM_get_width(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_CAM_get_data_ptr")]
  public static extern global::System.IntPtr CAM_get_data_ptr(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_CAM_get_byte_size")]
  public static extern ulong CAM_get_byte_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_CAM_cam_to_numpy")]
  public static extern void CAM_cam_to_numpy(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_CAMList__SWIG_0")]
  public static extern global::System.IntPtr new_CAMList__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_CAMList__SWIG_1")]
  public static extern global::System.IntPtr new_CAMList__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_CAMList__SWIG_2")]
  public static extern global::System.IntPtr new_CAMList__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_CAMList")]
  public static extern void delete_CAMList(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_CAMList__SWIG_3")]
  public static extern global::System.IntPtr new_CAMList__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_CAMList_get_count")]
  public static extern ulong CAMList_get_count(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_CAMList_append__SWIG_0")]
  public static extern void CAMList_append__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_CAMList_append__SWIG_1")]
  public static extern void CAMList_append__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, global::System.IntPtr jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_CAMList_get__SWIG_0")]
  public static extern global::System.IntPtr CAMList_get__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_CAMList_get__SWIG_1")]
  public static extern global::System.IntPtr CAMList_get__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_CAMList_empty")]
  public static extern bool CAMList_empty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_CAMList_resize")]
  public static extern void CAMList_resize(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_CAMList_clear")]
  public static extern void CAMList_clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_merge_patched_cam_to_original_shape")]
  public static extern int merge_patched_cam_to_original_shape(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_merge_patched_res_to_bboxes")]
  public static extern int merge_patched_res_to_bboxes(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Point__SWIG_0")]
  public static extern global::System.IntPtr new_Point__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Point__SWIG_1")]
  public static extern global::System.IntPtr new_Point__SWIG_1(int jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Point_x_set")]
  public static extern void Point_x_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Point_x_get")]
  public static extern int Point_x_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Point_y_set")]
  public static extern void Point_y_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Point_y_get")]
  public static extern int Point_y_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_Point")]
  public static extern void delete_Point(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Points__SWIG_0")]
  public static extern global::System.IntPtr new_Points__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_Points")]
  public static extern void delete_Points(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Points__SWIG_1")]
  public static extern global::System.IntPtr new_Points__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Points_get_count")]
  public static extern ulong Points_get_count(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Points_append")]
  public static extern void Points_append(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Points_get__SWIG_0")]
  public static extern global::System.IntPtr Points_get__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Points_get__SWIG_1")]
  public static extern global::System.IntPtr Points_get__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Points_empty")]
  public static extern bool Points_empty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Points_resize")]
  public static extern void Points_resize(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Points_clear")]
  public static extern void Points_clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_PointsList__SWIG_0")]
  public static extern global::System.IntPtr new_PointsList__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_PointsList")]
  public static extern void delete_PointsList(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_PointsList__SWIG_1")]
  public static extern global::System.IntPtr new_PointsList__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PointsList_get_count")]
  public static extern ulong PointsList_get_count(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PointsList_append")]
  public static extern void PointsList_append(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PointsList_get__SWIG_0")]
  public static extern global::System.IntPtr PointsList_get__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PointsList_get__SWIG_1")]
  public static extern global::System.IntPtr PointsList_get__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PointsList_empty")]
  public static extern bool PointsList_empty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PointsList_resize")]
  public static extern void PointsList_resize(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PointsList_clear")]
  public static extern void PointsList_clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Rect__SWIG_0")]
  public static extern global::System.IntPtr new_Rect__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Rect__SWIG_1")]
  public static extern global::System.IntPtr new_Rect__SWIG_1(int jarg1, int jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Rect_x_set")]
  public static extern void Rect_x_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Rect_x_get")]
  public static extern int Rect_x_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Rect_y_set")]
  public static extern void Rect_y_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Rect_y_get")]
  public static extern int Rect_y_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Rect_width_set")]
  public static extern void Rect_width_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Rect_width_get")]
  public static extern int Rect_width_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Rect_height_set")]
  public static extern void Rect_height_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Rect_height_get")]
  public static extern int Rect_height_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_Rect")]
  public static extern void delete_Rect(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Blob__SWIG_0")]
  public static extern global::System.IntPtr new_Blob__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_Blob")]
  public static extern void delete_Blob(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Blob__SWIG_1")]
  public static extern global::System.IntPtr new_Blob__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Blob__SWIG_2")]
  public static extern global::System.IntPtr new_Blob__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, float jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Blob_batch_idx_set")]
  public static extern void Blob_batch_idx_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Blob_batch_idx_get")]
  public static extern int Blob_batch_idx_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Blob_class_idx_set")]
  public static extern void Blob_class_idx_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Blob_class_idx_get")]
  public static extern int Blob_class_idx_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Blob_rect_set")]
  public static extern void Blob_rect_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Blob_rect_get")]
  public static extern global::System.IntPtr Blob_rect_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Blob_area_set")]
  public static extern void Blob_area_set(global::System.Runtime.InteropServices.HandleRef jarg1, ulong jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Blob_area_get")]
  public static extern ulong Blob_area_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Blob_prob_set")]
  public static extern void Blob_prob_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Blob_prob_get")]
  public static extern float Blob_prob_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Blob_get_contour")]
  public static extern global::System.IntPtr Blob_get_contour(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Blob_get_holes")]
  public static extern global::System.IntPtr Blob_get_holes(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Blob_get_vertical_central_points")]
  public static extern global::System.IntPtr Blob_get_vertical_central_points(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Blob_get_skeleton_points")]
  public static extern global::System.IntPtr Blob_get_skeleton_points(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Blob_has_child")]
  public static extern bool Blob_has_child(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Blob_get_child_result")]
  public static extern global::System.IntPtr Blob_get_child_result(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Blob_set_child_result")]
  public static extern void Blob_set_child_result(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_BlobList__SWIG_0")]
  public static extern global::System.IntPtr new_BlobList__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_BlobList")]
  public static extern void delete_BlobList(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_BlobList__SWIG_1")]
  public static extern global::System.IntPtr new_BlobList__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_BlobList_get_count")]
  public static extern ulong BlobList_get_count(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_BlobList_append")]
  public static extern void BlobList_append(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_BlobList_get__SWIG_0")]
  public static extern global::System.IntPtr BlobList_get__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_BlobList_get__SWIG_1")]
  public static extern global::System.IntPtr BlobList_get__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_BlobList_empty")]
  public static extern bool BlobList_empty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_BlobList_resize")]
  public static extern void BlobList_resize(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_BlobList_clear")]
  public static extern void BlobList_clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_BlobList_set_child_result")]
  public static extern void BlobList_set_child_result(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Bbox__SWIG_0")]
  public static extern global::System.IntPtr new_Bbox__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Bbox__SWIG_1")]
  public static extern global::System.IntPtr new_Bbox__SWIG_1(int jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Bbox__SWIG_2")]
  public static extern global::System.IntPtr new_Bbox__SWIG_2(int jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_Bbox")]
  public static extern void delete_Bbox(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Bbox__SWIG_3")]
  public static extern global::System.IntPtr new_Bbox__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Bbox_batch_idx_set")]
  public static extern void Bbox_batch_idx_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Bbox_batch_idx_get")]
  public static extern int Bbox_batch_idx_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Bbox_class_idx_set")]
  public static extern void Bbox_class_idx_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Bbox_class_idx_get")]
  public static extern int Bbox_class_idx_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Bbox_rect_set")]
  public static extern void Bbox_rect_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Bbox_rect_get")]
  public static extern global::System.IntPtr Bbox_rect_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Bbox_has_child")]
  public static extern bool Bbox_has_child(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Bbox_get_child_result")]
  public static extern global::System.IntPtr Bbox_get_child_result(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Bbox_set_child_result")]
  public static extern void Bbox_set_child_result(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_BboxList__SWIG_0")]
  public static extern global::System.IntPtr new_BboxList__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_BboxList")]
  public static extern void delete_BboxList(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_BboxList__SWIG_1")]
  public static extern global::System.IntPtr new_BboxList__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_BboxList_get_count")]
  public static extern ulong BboxList_get_count(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_BboxList_append")]
  public static extern void BboxList_append(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_BboxList_get__SWIG_0")]
  public static extern global::System.IntPtr BboxList_get__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_BboxList_get__SWIG_1")]
  public static extern global::System.IntPtr BboxList_get__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_BboxList_empty")]
  public static extern bool BboxList_empty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_BboxList_resize")]
  public static extern void BboxList_resize(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_BboxList_clear")]
  public static extern void BboxList_clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_BboxList_set_child_result")]
  public static extern void BboxList_set_child_result(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Angle__SWIG_0")]
  public static extern global::System.IntPtr new_Angle__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Angle__SWIG_1")]
  public static extern global::System.IntPtr new_Angle__SWIG_1(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_Angle")]
  public static extern void delete_Angle(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Angle__SWIG_2")]
  public static extern global::System.IntPtr new_Angle__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Angle_degree_set")]
  public static extern void Angle_degree_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Angle_degree_get")]
  public static extern int Angle_degree_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Angle_has_child")]
  public static extern bool Angle_has_child(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Angle_get_child_result")]
  public static extern global::System.IntPtr Angle_get_child_result(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Angle_set_child_result")]
  public static extern void Angle_set_child_result(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_AngleList__SWIG_0")]
  public static extern global::System.IntPtr new_AngleList__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_AngleList")]
  public static extern void delete_AngleList(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_AngleList__SWIG_1")]
  public static extern global::System.IntPtr new_AngleList__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_AngleList_get_count")]
  public static extern ulong AngleList_get_count(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_AngleList_append")]
  public static extern void AngleList_append(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_AngleList_get__SWIG_0")]
  public static extern global::System.IntPtr AngleList_get__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_AngleList_get__SWIG_1")]
  public static extern global::System.IntPtr AngleList_get__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_AngleList_empty")]
  public static extern bool AngleList_empty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_AngleList_resize")]
  public static extern void AngleList_resize(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_AngleList_clear")]
  public static extern void AngleList_clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_AngleList_set_child_result")]
  public static extern void AngleList_set_child_result(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Image__SWIG_0")]
  public static extern global::System.IntPtr new_Image__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Image__SWIG_1")]
  public static extern global::System.IntPtr new_Image__SWIG_1(int jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_Image")]
  public static extern void delete_Image(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Image__SWIG_2")]
  public static extern global::System.IntPtr new_Image__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Image_batch_idx_set")]
  public static extern void Image_batch_idx_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Image_batch_idx_get")]
  public static extern int Image_batch_idx_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Image_child_node_idx_set")]
  public static extern void Image_child_node_idx_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Image_child_node_idx_get")]
  public static extern int Image_child_node_idx_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Image_has_child")]
  public static extern bool Image_has_child(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Image_set_child_result")]
  public static extern void Image_set_child_result(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Image_get_child_result")]
  public static extern global::System.IntPtr Image_get_child_result(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_ImageList__SWIG_0")]
  public static extern global::System.IntPtr new_ImageList__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_ImageList")]
  public static extern void delete_ImageList(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_ImageList__SWIG_1")]
  public static extern global::System.IntPtr new_ImageList__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_ImageList_get_count")]
  public static extern ulong ImageList_get_count(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_ImageList_append")]
  public static extern void ImageList_append(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_ImageList_get__SWIG_0")]
  public static extern global::System.IntPtr ImageList_get__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_ImageList_get__SWIG_1")]
  public static extern global::System.IntPtr ImageList_get__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_ImageList_get_batch__SWIG_0")]
  public static extern global::System.IntPtr ImageList_get_batch__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_ImageList_get_batch__SWIG_1")]
  public static extern global::System.IntPtr ImageList_get_batch__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_ImageList_empty")]
  public static extern bool ImageList_empty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_ImageList_resize")]
  public static extern void ImageList_resize(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_ImageList_clear")]
  public static extern void ImageList_clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_ImageList_set_child_result")]
  public static extern void ImageList_set_child_result(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_TextBbox__SWIG_0")]
  public static extern global::System.IntPtr new_TextBbox__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_TextBbox__SWIG_1")]
  public static extern global::System.IntPtr new_TextBbox__SWIG_1(int jarg1, int jarg2, int jarg3, bool jarg4, char jarg5, int jarg6, int jarg7, int jarg8, int jarg9, int jarg10);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_TextBbox__SWIG_2")]
  public static extern global::System.IntPtr new_TextBbox__SWIG_2(int jarg1, int jarg2, int jarg3, bool jarg4, char jarg5, int jarg6, global::System.Runtime.InteropServices.HandleRef jarg7);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_TextBbox")]
  public static extern void delete_TextBbox(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_TextBbox__SWIG_3")]
  public static extern global::System.IntPtr new_TextBbox__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_TextBbox_batch_idx_set")]
  public static extern void TextBbox_batch_idx_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_TextBbox_batch_idx_get")]
  public static extern int TextBbox_batch_idx_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_TextBbox_class_idx_set")]
  public static extern void TextBbox_class_idx_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_TextBbox_class_idx_get")]
  public static extern int TextBbox_class_idx_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_TextBbox_order_idx_set")]
  public static extern void TextBbox_order_idx_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_TextBbox_order_idx_get")]
  public static extern int TextBbox_order_idx_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_TextBbox_condition_check_set")]
  public static extern void TextBbox_condition_check_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_TextBbox_condition_check_get")]
  public static extern bool TextBbox_condition_check_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_TextBbox_res_char_set")]
  public static extern void TextBbox_res_char_set(global::System.Runtime.InteropServices.HandleRef jarg1, char jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_TextBbox_res_char_get")]
  public static extern char TextBbox_res_char_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_TextBbox_batch_result_idx_set")]
  public static extern void TextBbox_batch_result_idx_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_TextBbox_batch_result_idx_get")]
  public static extern int TextBbox_batch_result_idx_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_TextBbox_rect_set")]
  public static extern void TextBbox_rect_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_TextBbox_rect_get")]
  public static extern global::System.IntPtr TextBbox_rect_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Text__SWIG_0")]
  public static extern global::System.IntPtr new_Text__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_Text")]
  public static extern void delete_Text(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Text__SWIG_1")]
  public static extern global::System.IntPtr new_Text__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Text_get_count")]
  public static extern ulong Text_get_count(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Text_get_text_bbox")]
  public static extern global::System.IntPtr Text_get_text_bbox(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Text_get_string")]
  public static extern string Text_get_string(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Text_batch_idx_set")]
  public static extern void Text_batch_idx_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Text_batch_idx_get")]
  public static extern int Text_batch_idx_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Text_set_result")]
  public static extern void Text_set_result(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_TextList__SWIG_0")]
  public static extern global::System.IntPtr new_TextList__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_TextList")]
  public static extern void delete_TextList(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_TextList__SWIG_1")]
  public static extern global::System.IntPtr new_TextList__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_TextList_get_text")]
  public static extern global::System.IntPtr TextList_get_text(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_TextList_get_text_from_batch")]
  public static extern global::System.IntPtr TextList_get_text_from_batch(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_TextList_get_count")]
  public static extern ulong TextList_get_count(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_TextList_append")]
  public static extern void TextList_append(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_TextList_empty")]
  public static extern bool TextList_empty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_TextList_clear")]
  public static extern void TextList_clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Result__SWIG_0")]
  public static extern global::System.IntPtr new_Result__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Result__SWIG_1")]
  public static extern global::System.IntPtr new_Result__SWIG_1(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_Result")]
  public static extern void delete_Result(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Result__SWIG_2")]
  public static extern global::System.IntPtr new_Result__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Result_get_status")]
  public static extern int Result_get_status(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Result_clear")]
  public static extern void Result_clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Result_get_batch_result")]
  public static extern global::System.IntPtr Result_get_batch_result(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Result_model_type_set")]
  public static extern void Result_model_type_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Result_model_type_get")]
  public static extern int Result_model_type_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Result_classes_set")]
  public static extern void Result_classes_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Result_classes_get")]
  public static extern global::System.IntPtr Result_classes_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Result_probs_set")]
  public static extern void Result_probs_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Result_probs_get")]
  public static extern global::System.IntPtr Result_probs_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Result_cams_set")]
  public static extern void Result_cams_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Result_cams_get")]
  public static extern global::System.IntPtr Result_cams_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Result_blobs_set")]
  public static extern void Result_blobs_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Result_blobs_get")]
  public static extern global::System.IntPtr Result_blobs_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Result_bboxes_set")]
  public static extern void Result_bboxes_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Result_bboxes_get")]
  public static extern global::System.IntPtr Result_bboxes_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Result_angles_set")]
  public static extern void Result_angles_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Result_angles_get")]
  public static extern global::System.IntPtr Result_angles_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Result_images_set")]
  public static extern void Result_images_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Result_images_get")]
  public static extern global::System.IntPtr Result_images_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Result_texts_set")]
  public static extern void Result_texts_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Result_texts_get")]
  public static extern global::System.IntPtr Result_texts_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_OIConverter__SWIG_0")]
  public static extern global::System.IntPtr new_OIConverter__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_OIConverter__SWIG_1")]
  public static extern global::System.IntPtr new_OIConverter__SWIG_1(int jarg1, int jarg2, int jarg3, int jarg4, int jarg5, bool jarg6, bool jarg7);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_OIConverter__SWIG_2")]
  public static extern global::System.IntPtr new_OIConverter__SWIG_2(int jarg1, int jarg2, int jarg3, int jarg4, int jarg5, bool jarg6);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_OIConverter__SWIG_3")]
  public static extern global::System.IntPtr new_OIConverter__SWIG_3(int jarg1, int jarg2, int jarg3, int jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_OIConverter__SWIG_4")]
  public static extern global::System.IntPtr new_OIConverter__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_OIConverter")]
  public static extern void delete_OIConverter(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_OIConverter_convert")]
  public static extern global::System.IntPtr OIConverter_convert(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, global::System.Runtime.InteropServices.HandleRef jarg6, global::System.Runtime.InteropServices.HandleRef jarg7);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_OIConverter_get_convert_shape")]
  public static extern int OIConverter_get_convert_shape(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_OIConverter_get_convert_type")]
  public static extern int OIConverter_get_convert_type(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_OIConverter_get_crop_equal_width")]
  public static extern int OIConverter_get_crop_equal_width(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_OIConverter_get_crop_equal_height")]
  public static extern int OIConverter_get_crop_equal_height(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_OIConverter_get_padding")]
  public static extern int OIConverter_get_padding(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_OIConverter_get_include_unlabeled")]
  public static extern bool OIConverter_get_include_unlabeled(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_OIConverter_get_mask_to_single_image")]
  public static extern bool OIConverter_get_mask_to_single_image(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_OIConverter_set_convert_shape")]
  public static extern int OIConverter_set_convert_shape(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_OIConverter_set_convert_type")]
  public static extern int OIConverter_set_convert_type(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_OIConverter_set_crop_equal_width")]
  public static extern int OIConverter_set_crop_equal_width(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_OIConverter_set_crop_equal_height")]
  public static extern int OIConverter_set_crop_equal_height(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_OIConverter_set_padding")]
  public static extern int OIConverter_set_padding(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_OIConverter_get_status")]
  public static extern int OIConverter_get_status(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_OIConverter_destroy")]
  public static extern int OIConverter_destroy(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_FlowchartNode__SWIG_0")]
  public static extern global::System.IntPtr new_FlowchartNode__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_FlowchartNode__SWIG_1")]
  public static extern global::System.IntPtr new_FlowchartNode__SWIG_1(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_FlowchartNode__SWIG_2")]
  public static extern global::System.IntPtr new_FlowchartNode__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_FlowchartNode__SWIG_3")]
  public static extern global::System.IntPtr new_FlowchartNode__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_FlowchartNode")]
  public static extern void delete_FlowchartNode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FlowchartNode_get_predictor")]
  public static extern global::System.IntPtr FlowchartNode_get_predictor(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FlowchartNode_get_oiconverter")]
  public static extern global::System.IntPtr FlowchartNode_get_oiconverter(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FlowchartNode_has_child")]
  public static extern bool FlowchartNode_has_child(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FlowchartNode_get_child")]
  public static extern global::System.IntPtr FlowchartNode_get_child(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FlowchartNode_get_children")]
  public static extern global::System.IntPtr FlowchartNode_get_children(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FlowchartNode_convert")]
  public static extern global::System.IntPtr FlowchartNode_convert(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, global::System.Runtime.InteropServices.HandleRef jarg6);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FlowchartNode_predict")]
  public static extern global::System.IntPtr FlowchartNode_predict(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FlowchartNode_get_status")]
  public static extern int FlowchartNode_get_status(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FlowchartNode_destroy")]
  public static extern int FlowchartNode_destroy(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_FlowchartEngine__SWIG_0")]
  public static extern global::System.IntPtr new_FlowchartEngine__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_FlowchartEngine__SWIG_1")]
  public static extern global::System.IntPtr new_FlowchartEngine__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_FlowchartEngine")]
  public static extern void delete_FlowchartEngine(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Flowchart__SWIG_0")]
  public static extern global::System.IntPtr new_Flowchart__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Flowchart__SWIG_1")]
  public static extern global::System.IntPtr new_Flowchart__SWIG_1([global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]string jarg1, int jarg2, int jarg3, int jarg4, bool jarg5, bool jarg6, int jarg7);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Flowchart__SWIG_2")]
  public static extern global::System.IntPtr new_Flowchart__SWIG_2([global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]string jarg1, int jarg2, int jarg3, int jarg4, bool jarg5, bool jarg6);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Flowchart__SWIG_3")]
  public static extern global::System.IntPtr new_Flowchart__SWIG_3([global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]string jarg1, int jarg2, int jarg3, int jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Flowchart__SWIG_4")]
  public static extern global::System.IntPtr new_Flowchart__SWIG_4([global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]string jarg1, int jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Flowchart__SWIG_5")]
  public static extern global::System.IntPtr new_Flowchart__SWIG_5([global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]string jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Flowchart__SWIG_6")]
  public static extern global::System.IntPtr new_Flowchart__SWIG_6([global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]string jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Flowchart__SWIG_7")]
  public static extern global::System.IntPtr new_Flowchart__SWIG_7([global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]string jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Flowchart__SWIG_8")]
  public static extern global::System.IntPtr new_Flowchart__SWIG_8([global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, int jarg4, bool jarg5, bool jarg6);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Flowchart__SWIG_9")]
  public static extern global::System.IntPtr new_Flowchart__SWIG_9([global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, int jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Flowchart__SWIG_10")]
  public static extern global::System.IntPtr new_Flowchart__SWIG_10([global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Flowchart__SWIG_11")]
  public static extern global::System.IntPtr new_Flowchart__SWIG_11([global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Flowchart__SWIG_12")]
  public static extern global::System.IntPtr new_Flowchart__SWIG_12([global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Flowchart__SWIG_13")]
  public static extern global::System.IntPtr new_Flowchart__SWIG_13(int jarg1, [global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]string jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Flowchart__SWIG_14")]
  public static extern global::System.IntPtr new_Flowchart__SWIG_14(int jarg1, [global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]string jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Flowchart__SWIG_15")]
  public static extern global::System.IntPtr new_Flowchart__SWIG_15(int jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Flowchart__SWIG_16")]
  public static extern global::System.IntPtr new_Flowchart__SWIG_16(int jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_Flowchart__SWIG_17")]
  public static extern global::System.IntPtr new_Flowchart__SWIG_17(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_Flowchart")]
  public static extern void delete_Flowchart(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Flowchart_clear")]
  public static extern void Flowchart_clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Flowchart_create_root")]
  public static extern global::System.IntPtr Flowchart_create_root(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Flowchart_create_node__SWIG_0")]
  public static extern global::System.IntPtr Flowchart_create_node__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9, bool jarg10, bool jarg11);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Flowchart_create_node__SWIG_1")]
  public static extern global::System.IntPtr Flowchart_create_node__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9, bool jarg10);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Flowchart_create_node__SWIG_2")]
  public static extern global::System.IntPtr Flowchart_create_node__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Flowchart_create_node__SWIG_3")]
  public static extern global::System.IntPtr Flowchart_create_node__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, int jarg6, int jarg7, int jarg8);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Flowchart_create_node__SWIG_4")]
  public static extern global::System.IntPtr Flowchart_create_node__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, int jarg6, int jarg7);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Flowchart_create_node__SWIG_5")]
  public static extern global::System.IntPtr Flowchart_create_node__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, int jarg6);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Flowchart_create_node__SWIG_6")]
  public static extern global::System.IntPtr Flowchart_create_node__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Flowchart_create_node__SWIG_7")]
  public static extern global::System.IntPtr Flowchart_create_node__SWIG_7(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Flowchart_get_node__SWIG_0")]
  public static extern global::System.IntPtr Flowchart_get_node__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Flowchart_get_node__SWIG_1")]
  public static extern global::System.IntPtr Flowchart_get_node__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Flowchart_get_node__SWIG_2")]
  public static extern global::System.IntPtr Flowchart_get_node__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Flowchart_delete_node__SWIG_0")]
  public static extern int Flowchart_delete_node__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Flowchart_delete_node__SWIG_1")]
  public static extern int Flowchart_delete_node__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Flowchart_print_flowchart")]
  public static extern void Flowchart_print_flowchart(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Flowchart_get_root_batch_size")]
  public static extern int Flowchart_get_root_batch_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Flowchart_save_flowchart_engine__SWIG_0")]
  public static extern int Flowchart_save_flowchart_engine__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]string jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Flowchart_save_flowchart_engine__SWIG_1")]
  public static extern int Flowchart_save_flowchart_engine__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Flowchart_predict")]
  public static extern global::System.IntPtr Flowchart_predict(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_Flowchart_get_status")]
  public static extern int Flowchart_get_status(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_get_last_error_msg")]
  public static extern string get_last_error_msg();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_get_version_str")]
  public static extern string get_version_str();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_initialize_nrt")]
  public static extern int initialize_nrt(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_cleanup")]
  public static extern void cleanup();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoOutputParam_need_create_set")]
  public static extern void PhotometricStereoOutputParam_need_create_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoOutputParam_need_create_get")]
  public static extern bool PhotometricStereoOutputParam_need_create_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoOutputParam_contrast_set")]
  public static extern void PhotometricStereoOutputParam_contrast_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoOutputParam_contrast_get")]
  public static extern float PhotometricStereoOutputParam_contrast_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoOutputParam_brightness_set")]
  public static extern void PhotometricStereoOutputParam_brightness_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoOutputParam_brightness_get")]
  public static extern float PhotometricStereoOutputParam_brightness_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_PhotometricStereoOutputParam")]
  public static extern global::System.IntPtr new_PhotometricStereoOutputParam();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_PhotometricStereoOutputParam")]
  public static extern void delete_PhotometricStereoOutputParam(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoHeightMapParam_need_create_set")]
  public static extern void PhotometricStereoHeightMapParam_need_create_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoHeightMapParam_need_create_get")]
  public static extern bool PhotometricStereoHeightMapParam_need_create_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoHeightMapParam_scaling_x_set")]
  public static extern void PhotometricStereoHeightMapParam_scaling_x_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoHeightMapParam_scaling_x_get")]
  public static extern int PhotometricStereoHeightMapParam_scaling_x_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoHeightMapParam_scaling_y_set")]
  public static extern void PhotometricStereoHeightMapParam_scaling_y_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoHeightMapParam_scaling_y_get")]
  public static extern int PhotometricStereoHeightMapParam_scaling_y_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoHeightMapParam_scaling_z_set")]
  public static extern void PhotometricStereoHeightMapParam_scaling_z_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoHeightMapParam_scaling_z_get")]
  public static extern int PhotometricStereoHeightMapParam_scaling_z_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoHeightMapParam_contrast_set")]
  public static extern void PhotometricStereoHeightMapParam_contrast_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoHeightMapParam_contrast_get")]
  public static extern float PhotometricStereoHeightMapParam_contrast_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoHeightMapParam_brightness_set")]
  public static extern void PhotometricStereoHeightMapParam_brightness_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoHeightMapParam_brightness_get")]
  public static extern float PhotometricStereoHeightMapParam_brightness_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_PhotometricStereoHeightMapParam")]
  public static extern global::System.IntPtr new_PhotometricStereoHeightMapParam();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_PhotometricStereoHeightMapParam")]
  public static extern void delete_PhotometricStereoHeightMapParam(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoConfig_albedo_set")]
  public static extern void PhotometricStereoConfig_albedo_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoConfig_albedo_get")]
  public static extern global::System.IntPtr PhotometricStereoConfig_albedo_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoConfig_normal_set")]
  public static extern void PhotometricStereoConfig_normal_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoConfig_normal_get")]
  public static extern global::System.IntPtr PhotometricStereoConfig_normal_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoConfig_gradient_x_set")]
  public static extern void PhotometricStereoConfig_gradient_x_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoConfig_gradient_x_get")]
  public static extern global::System.IntPtr PhotometricStereoConfig_gradient_x_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoConfig_gradient_y_set")]
  public static extern void PhotometricStereoConfig_gradient_y_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoConfig_gradient_y_get")]
  public static extern global::System.IntPtr PhotometricStereoConfig_gradient_y_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoConfig_gradient_z_set")]
  public static extern void PhotometricStereoConfig_gradient_z_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoConfig_gradient_z_get")]
  public static extern global::System.IntPtr PhotometricStereoConfig_gradient_z_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoConfig_mean_curvature_set")]
  public static extern void PhotometricStereoConfig_mean_curvature_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoConfig_mean_curvature_get")]
  public static extern global::System.IntPtr PhotometricStereoConfig_mean_curvature_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoConfig_absolute_curvature_set")]
  public static extern void PhotometricStereoConfig_absolute_curvature_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoConfig_absolute_curvature_get")]
  public static extern global::System.IntPtr PhotometricStereoConfig_absolute_curvature_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoConfig_depth_set")]
  public static extern void PhotometricStereoConfig_depth_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoConfig_depth_get")]
  public static extern global::System.IntPtr PhotometricStereoConfig_depth_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_PhotometricStereoConfig")]
  public static extern global::System.IntPtr new_PhotometricStereoConfig();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_PhotometricStereoConfig")]
  public static extern void delete_PhotometricStereoConfig(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoResult_albedo_set")]
  public static extern void PhotometricStereoResult_albedo_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoResult_albedo_get")]
  public static extern global::System.IntPtr PhotometricStereoResult_albedo_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoResult_normal_set")]
  public static extern void PhotometricStereoResult_normal_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoResult_normal_get")]
  public static extern global::System.IntPtr PhotometricStereoResult_normal_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoResult_gradient_x_set")]
  public static extern void PhotometricStereoResult_gradient_x_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoResult_gradient_x_get")]
  public static extern global::System.IntPtr PhotometricStereoResult_gradient_x_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoResult_gradient_y_set")]
  public static extern void PhotometricStereoResult_gradient_y_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoResult_gradient_y_get")]
  public static extern global::System.IntPtr PhotometricStereoResult_gradient_y_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoResult_gradient_z_set")]
  public static extern void PhotometricStereoResult_gradient_z_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoResult_gradient_z_get")]
  public static extern global::System.IntPtr PhotometricStereoResult_gradient_z_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoResult_mean_curvature_set")]
  public static extern void PhotometricStereoResult_mean_curvature_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoResult_mean_curvature_get")]
  public static extern global::System.IntPtr PhotometricStereoResult_mean_curvature_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoResult_absolute_curvature_set")]
  public static extern void PhotometricStereoResult_absolute_curvature_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoResult_absolute_curvature_get")]
  public static extern global::System.IntPtr PhotometricStereoResult_absolute_curvature_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoResult_depth_set")]
  public static extern void PhotometricStereoResult_depth_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_PhotometricStereoResult_depth_get")]
  public static extern global::System.IntPtr PhotometricStereoResult_depth_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_PhotometricStereoResult")]
  public static extern global::System.IntPtr new_PhotometricStereoResult();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_PhotometricStereoResult")]
  public static extern void delete_PhotometricStereoResult(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_create_photometric_stereo")]
  public static extern global::System.IntPtr create_photometric_stereo(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_FlowchartNodeVector__SWIG_0")]
  public static extern global::System.IntPtr new_FlowchartNodeVector__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_FlowchartNodeVector__SWIG_1")]
  public static extern global::System.IntPtr new_FlowchartNodeVector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FlowchartNodeVector_Clear")]
  public static extern void FlowchartNodeVector_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FlowchartNodeVector_Add")]
  public static extern void FlowchartNodeVector_Add(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FlowchartNodeVector_size")]
  public static extern uint FlowchartNodeVector_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FlowchartNodeVector_empty")]
  public static extern bool FlowchartNodeVector_empty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FlowchartNodeVector_capacity")]
  public static extern uint FlowchartNodeVector_capacity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FlowchartNodeVector_reserve")]
  public static extern void FlowchartNodeVector_reserve(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_FlowchartNodeVector__SWIG_2")]
  public static extern global::System.IntPtr new_FlowchartNodeVector__SWIG_2(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FlowchartNodeVector_getitemcopy")]
  public static extern global::System.IntPtr FlowchartNodeVector_getitemcopy(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FlowchartNodeVector_getitem")]
  public static extern global::System.IntPtr FlowchartNodeVector_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FlowchartNodeVector_setitem")]
  public static extern void FlowchartNodeVector_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FlowchartNodeVector_AddRange")]
  public static extern void FlowchartNodeVector_AddRange(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FlowchartNodeVector_GetRange")]
  public static extern global::System.IntPtr FlowchartNodeVector_GetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FlowchartNodeVector_Insert")]
  public static extern void FlowchartNodeVector_Insert(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FlowchartNodeVector_InsertRange")]
  public static extern void FlowchartNodeVector_InsertRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FlowchartNodeVector_RemoveAt")]
  public static extern void FlowchartNodeVector_RemoveAt(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FlowchartNodeVector_RemoveRange")]
  public static extern void FlowchartNodeVector_RemoveRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FlowchartNodeVector_Repeat")]
  public static extern global::System.IntPtr FlowchartNodeVector_Repeat(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FlowchartNodeVector_Reverse__SWIG_0")]
  public static extern void FlowchartNodeVector_Reverse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FlowchartNodeVector_Reverse__SWIG_1")]
  public static extern void FlowchartNodeVector_Reverse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_FlowchartNodeVector_SetRange")]
  public static extern void FlowchartNodeVector_SetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_FlowchartNodeVector")]
  public static extern void delete_FlowchartNodeVector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_NDBufferVector__SWIG_0")]
  public static extern global::System.IntPtr new_NDBufferVector__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_NDBufferVector__SWIG_1")]
  public static extern global::System.IntPtr new_NDBufferVector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBufferVector_Clear")]
  public static extern void NDBufferVector_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBufferVector_Add")]
  public static extern void NDBufferVector_Add(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBufferVector_size")]
  public static extern uint NDBufferVector_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBufferVector_empty")]
  public static extern bool NDBufferVector_empty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBufferVector_capacity")]
  public static extern uint NDBufferVector_capacity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBufferVector_reserve")]
  public static extern void NDBufferVector_reserve(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_new_NDBufferVector__SWIG_2")]
  public static extern global::System.IntPtr new_NDBufferVector__SWIG_2(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBufferVector_getitemcopy")]
  public static extern global::System.IntPtr NDBufferVector_getitemcopy(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBufferVector_getitem")]
  public static extern global::System.IntPtr NDBufferVector_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBufferVector_setitem")]
  public static extern void NDBufferVector_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBufferVector_AddRange")]
  public static extern void NDBufferVector_AddRange(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBufferVector_GetRange")]
  public static extern global::System.IntPtr NDBufferVector_GetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBufferVector_Insert")]
  public static extern void NDBufferVector_Insert(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBufferVector_InsertRange")]
  public static extern void NDBufferVector_InsertRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBufferVector_RemoveAt")]
  public static extern void NDBufferVector_RemoveAt(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBufferVector_RemoveRange")]
  public static extern void NDBufferVector_RemoveRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBufferVector_Repeat")]
  public static extern global::System.IntPtr NDBufferVector_Repeat(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBufferVector_Reverse__SWIG_0")]
  public static extern void NDBufferVector_Reverse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBufferVector_Reverse__SWIG_1")]
  public static extern void NDBufferVector_Reverse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_NDBufferVector_SetRange")]
  public static extern void NDBufferVector_SetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("nrt", EntryPoint="CSharp_nrt_delete_NDBufferVector")]
  public static extern void delete_NDBufferVector(global::System.Runtime.InteropServices.HandleRef jarg1);
}

}
namespace nrt {

public class nrt {
  public static string dtype_to_str(DType dtype) {
    string ret = nrtPINVOKE.dtype_to_str((int)dtype);
    return ret;
  }

  public static int get_dtype_elemsize(DType d) {
    int ret = nrtPINVOKE.get_dtype_elemsize((int)d);
    return ret;
  }

  public static Status zero_padding(NDBuffer inputs, NDBuffer outputs, Shape target_shape, PaddingOpt padd_opt) {
    Status ret = (Status)nrtPINVOKE.zero_padding__SWIG_0(NDBuffer.getCPtr(inputs), NDBuffer.getCPtr(outputs), Shape.getCPtr(target_shape), (int)padd_opt);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Status zero_padding(NDBuffer inputs, NDBuffer outputs, Shape target_shape) {
    Status ret = (Status)nrtPINVOKE.zero_padding__SWIG_1(NDBuffer.getCPtr(inputs), NDBuffer.getCPtr(outputs), Shape.getCPtr(target_shape));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Status set_roi(NDBuffer inputs, NDBuffer outputs, NDBuffer roi_info) {
    Status ret = (Status)nrtPINVOKE.set_roi(NDBuffer.getCPtr(inputs), NDBuffer.getCPtr(outputs), NDBuffer.getCPtr(roi_info));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Status set_mask(NDBuffer inputs, NDBuffer outputs, NDBuffer mask_info) {
    Status ret = (Status)nrtPINVOKE.set_mask(NDBuffer.getCPtr(inputs), NDBuffer.getCPtr(outputs), NDBuffer.getCPtr(mask_info));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Status set_roi_mask(NDBuffer inputs, NDBuffer outputs, NDBuffer roi_info, NDBuffer mask_info) {
    Status ret = (Status)nrtPINVOKE.set_roi_mask(NDBuffer.getCPtr(inputs), NDBuffer.getCPtr(outputs), NDBuffer.getCPtr(roi_info), NDBuffer.getCPtr(mask_info));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Status resize(NDBuffer inputs, NDBuffer outputs, Shape target_shape, InterpolationType interpol_ty) {
    Status ret = (Status)nrtPINVOKE.resize__SWIG_0(NDBuffer.getCPtr(inputs), NDBuffer.getCPtr(outputs), Shape.getCPtr(target_shape), (int)interpol_ty);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Status resize(NDBuffer inputs, NDBuffer outputs, Shape target_shape) {
    Status ret = (Status)nrtPINVOKE.resize__SWIG_1(NDBuffer.getCPtr(inputs), NDBuffer.getCPtr(outputs), Shape.getCPtr(target_shape));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Status resize(NDBuffer inputs, NDBuffer outputs, float scale_factor, InterpolationType interpol_ty) {
    Status ret = (Status)nrtPINVOKE.resize__SWIG_2(NDBuffer.getCPtr(inputs), NDBuffer.getCPtr(outputs), scale_factor, (int)interpol_ty);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Status resize(NDBuffer inputs, NDBuffer outputs, float scale_factor) {
    Status ret = (Status)nrtPINVOKE.resize__SWIG_3(NDBuffer.getCPtr(inputs), NDBuffer.getCPtr(outputs), scale_factor);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Status extract_patches_to_target_shape(NDBuffer images, Shape target_shape, NDBuffer out_patches, NDBuffer out_patch_info) {
    Status ret = (Status)nrtPINVOKE.extract_patches_to_target_shape__SWIG_0(NDBuffer.getCPtr(images), Shape.getCPtr(target_shape), NDBuffer.getCPtr(out_patches), NDBuffer.getCPtr(out_patch_info));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Status merge_patches_to_orginal_shape(NDBuffer patches, NDBuffer patch_info, NDBuffer out_image, bool refinement) {
    Status ret = (Status)nrtPINVOKE.merge_patches_to_orginal_shape__SWIG_0(NDBuffer.getCPtr(patches), NDBuffer.getCPtr(patch_info), NDBuffer.getCPtr(out_image), refinement);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Status merge_patches_to_orginal_shape(NDBuffer patches, NDBuffer patch_info, NDBuffer out_image) {
    Status ret = (Status)nrtPINVOKE.merge_patches_to_orginal_shape__SWIG_1(NDBuffer.getCPtr(patches), NDBuffer.getCPtr(patch_info), NDBuffer.getCPtr(out_image));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Status pred_map_threshold_by_size(NDBuffer pred_map, NDBuffer bounding_rects, NDBuffer size_thres, int num_classes) {
    Status ret = (Status)nrtPINVOKE.pred_map_threshold_by_size(NDBuffer.getCPtr(pred_map), NDBuffer.getCPtr(bounding_rects), NDBuffer.getCPtr(size_thres), num_classes);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Status pred_box_threshold_by_size(NDBuffer output_bcyxhw, double h_ratio, double w_ratio, NDBuffer size_thres, int num_classes) {
    Status ret = (Status)nrtPINVOKE.pred_box_threshold_by_size(NDBuffer.getCPtr(output_bcyxhw), h_ratio, w_ratio, NDBuffer.getCPtr(size_thres), num_classes);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Status prob_map_threshold(NDBuffer prob_map, float prob_thres, NDBuffer result_classes, ThresholdMode thres_mode) {
    Status ret = (Status)nrtPINVOKE.prob_map_threshold__SWIG_0(NDBuffer.getCPtr(prob_map), prob_thres, NDBuffer.getCPtr(result_classes), (int)thres_mode);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Status prob_map_threshold(NDBuffer prob_map, float prob_thres, NDBuffer result_classes) {
    Status ret = (Status)nrtPINVOKE.prob_map_threshold__SWIG_1(NDBuffer.getCPtr(prob_map), prob_thres, NDBuffer.getCPtr(result_classes));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Status prob_map_threshold(NDBuffer prob_map, NDBuffer prob_thres, NDBuffer result_classes, ThresholdMode thres_mode) {
    Status ret = (Status)nrtPINVOKE.prob_map_threshold__SWIG_2(NDBuffer.getCPtr(prob_map), NDBuffer.getCPtr(prob_thres), NDBuffer.getCPtr(result_classes), (int)thres_mode);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Status prob_map_threshold(NDBuffer prob_map, NDBuffer prob_thres, NDBuffer result_classes) {
    Status ret = (Status)nrtPINVOKE.prob_map_threshold__SWIG_3(NDBuffer.getCPtr(prob_map), NDBuffer.getCPtr(prob_thres), NDBuffer.getCPtr(result_classes));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Status pred_map_threshold_by_pixel_prob(NDBuffer pred_map, NDBuffer prob_map, float prob_thres) {
    Status ret = (Status)nrtPINVOKE.pred_map_threshold_by_pixel_prob__SWIG_0(NDBuffer.getCPtr(pred_map), NDBuffer.getCPtr(prob_map), prob_thres);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Status pred_map_threshold_by_pixel_prob(NDBuffer pred_map, NDBuffer prob_map, NDBuffer prob_thres) {
    Status ret = (Status)nrtPINVOKE.pred_map_threshold_by_pixel_prob__SWIG_1(NDBuffer.getCPtr(pred_map), NDBuffer.getCPtr(prob_map), NDBuffer.getCPtr(prob_thres));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Status pred_map_threshold_by_blob_prob(NDBuffer pred_map, NDBuffer prob_map, float prob_thres) {
    Status ret = (Status)nrtPINVOKE.pred_map_threshold_by_blob_prob__SWIG_0(NDBuffer.getCPtr(pred_map), NDBuffer.getCPtr(prob_map), prob_thres);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Status pred_map_threshold_by_blob_prob(NDBuffer pred_map, NDBuffer prob_map, NDBuffer prob_thres) {
    Status ret = (Status)nrtPINVOKE.pred_map_threshold_by_blob_prob__SWIG_1(NDBuffer.getCPtr(pred_map), NDBuffer.getCPtr(prob_map), NDBuffer.getCPtr(prob_thres));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Status convert_to_colormap(NDBuffer input_images, NDBuffer output_images) {
    Status ret = (Status)nrtPINVOKE.convert_to_colormap(NDBuffer.getCPtr(input_images), NDBuffer.getCPtr(output_images));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Status extract_patches_to_target_shape(NDBuffer images, Shape target_shape, NDBuffer out_patches, NDBuffer out_patch_info, ModelType model_type, float overlap_ratio) {
    Status ret = (Status)nrtPINVOKE.extract_patches_to_target_shape__SWIG_1(NDBuffer.getCPtr(images), Shape.getCPtr(target_shape), NDBuffer.getCPtr(out_patches), NDBuffer.getCPtr(out_patch_info), (int)model_type, overlap_ratio);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Status match_with_template(NDBufferList list, NDBuffer image_sizes, NDBuffer predicted_bboxes, Model model) {
    Status ret = (Status)nrtPINVOKE.match_with_template__SWIG_0(NDBufferList.getCPtr(list), NDBuffer.getCPtr(image_sizes), NDBuffer.getCPtr(predicted_bboxes), Model.getCPtr(model));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Status match_with_template(NDBufferList list, SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_t image_sizes, NDBuffer predicted_bboxes, Model model) {
    Status ret = (Status)nrtPINVOKE.match_with_template__SWIG_1(NDBufferList.getCPtr(list), SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_t.getCPtr(image_sizes), NDBuffer.getCPtr(predicted_bboxes), Model.getCPtr(model));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Status merge_patched_cam_to_original_shape(NDBuffer patches_feature, NDBuffer output_pred, NDBuffer patch_info, NDBufferList cam_list) {
    Status ret = (Status)nrtPINVOKE.merge_patched_cam_to_original_shape(NDBuffer.getCPtr(patches_feature), NDBuffer.getCPtr(output_pred), NDBuffer.getCPtr(patch_info), NDBufferList.getCPtr(cam_list));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Status merge_patched_res_to_bboxes(NDBuffer output_pred, NDBuffer patch_info, NDBuffer bbox_res) {
    Status ret = (Status)nrtPINVOKE.merge_patched_res_to_bboxes(NDBuffer.getCPtr(output_pred), NDBuffer.getCPtr(patch_info), NDBuffer.getCPtr(bbox_res));
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string get_last_error_msg() {
    string ret = nrtPINVOKE.get_last_error_msg();
    return ret;
  }

  public static string get_version_str() {
    string ret = nrtPINVOKE.get_version_str();
    return ret;
  }

  public static int initialize_nrt(int initialize_param) {
    int ret = nrtPINVOKE.initialize_nrt(initialize_param);
    return ret;
  }

  public static void cleanup() {
    nrtPINVOKE.cleanup();
  }

  public static PhotometricStereoResult create_photometric_stereo(PhotometricStereoConfig config, NDBufferList images, FloatVector slant, FloatVector tilt) {
    PhotometricStereoResult ret = new PhotometricStereoResult(nrtPINVOKE.create_photometric_stereo(PhotometricStereoConfig.getCPtr(config), NDBufferList.getCPtr(images), FloatVector.getCPtr(slant), FloatVector.getCPtr(tilt)), true);
    if (nrtPINVOKE.SWIGPendingException.Pending) throw nrtPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static readonly int NRT_INITIALIZE_PARAM = nrtPINVOKE.NRT_INITIALIZE_PARAM_get();
  public static readonly int NRT_MIN_IMG_HW = nrtPINVOKE.NRT_MIN_IMG_HW_get();
  public static readonly int NRT_MAX_IMG_C = nrtPINVOKE.NRT_MAX_IMG_C_get();
  public static readonly string NRT_KEY_WORKSPACE_SIZE = nrtPINVOKE.NRT_KEY_WORKSPACE_SIZE_get();
}

}
namespace nrt {

public class SWIGTYPE_p_std__setT_int_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__setT_int_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__setT_int_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__setT_int_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__setT_int_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace nrt {

public class SWIGTYPE_p_p_unsigned_char {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_p_unsigned_char(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_p_unsigned_char() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_p_unsigned_char obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_p_unsigned_char obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace nrt {

public class SWIGTYPE_p_std__optionalT_nrt__TextRule_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__optionalT_nrt__TextRule_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__optionalT_nrt__TextRule_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__optionalT_nrt__TextRule_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__optionalT_nrt__TextRule_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace nrt {

public class SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace nrt {

public class SWIGTYPE_p_std__vectorT_nrt__BoxRule_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_nrt__BoxRule_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_nrt__BoxRule_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_nrt__BoxRule_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__vectorT_nrt__BoxRule_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace nrt {

public class SWIGTYPE_p_std__optionalT_nrt__Roi_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__optionalT_nrt__Roi_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__optionalT_nrt__Roi_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__optionalT_nrt__Roi_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__optionalT_nrt__Roi_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace nrt {

public class SWIGTYPE_p_int {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_int(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_int() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_int obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_int obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace nrt {

public class SWIGTYPE_p_std__optionalT_int_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__optionalT_int_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__optionalT_int_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__optionalT_int_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__optionalT_int_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace nrt {

public class SWIGTYPE_p_std__vectorT_std__vectorT_nrt__Point_t_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_std__vectorT_nrt__Point_t_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_std__vectorT_nrt__Point_t_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_std__vectorT_nrt__Point_t_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__vectorT_std__vectorT_nrt__Point_t_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace nrt {

public class SWIGTYPE_p_std__mapT_std__string_std__string_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__mapT_std__string_std__string_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__mapT_std__string_std__string_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__mapT_std__string_std__string_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__mapT_std__string_std__string_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace nrt {

public class SWIGTYPE_p_std__vectorT_nrt__TextBbox_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_nrt__TextBbox_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_nrt__TextBbox_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_nrt__TextBbox_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__vectorT_nrt__TextBbox_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace nrt {

public class SWIGTYPE_p_std__optionalT_std__string_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__optionalT_std__string_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__optionalT_std__string_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__optionalT_std__string_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__optionalT_std__string_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace nrt {

public class SWIGTYPE_p_std__vectorT_std__setT_int_t_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_std__setT_int_t_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_std__setT_int_t_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_std__setT_int_t_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__vectorT_std__setT_int_t_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace nrt {

public class SWIGTYPE_p_nrt__Executor__ExecutorImpl {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_nrt__Executor__ExecutorImpl(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_nrt__Executor__ExecutorImpl() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_nrt__Executor__ExecutorImpl obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_nrt__Executor__ExecutorImpl obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace nrt {

public class SWIGTYPE_p_std__vectorT_int_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_int_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_int_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_int_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__vectorT_int_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace nrt {

public class SWIGTYPE_p_std__vectorT_nrt__Point_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_nrt__Point_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_nrt__Point_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_nrt__Point_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__vectorT_nrt__Point_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
